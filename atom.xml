<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>红尘漫步</title>
  <subtitle>爱吃鱼的小强</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-04-11T08:22:31.282Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Justin Zhou</name>
    <email>13912926126@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>监控系统杂谈</title>
    <link href="http://yoursite.com/2018/04/11/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F%E6%9D%82%E8%B0%88/"/>
    <id>http://yoursite.com/2018/04/11/监控系统杂谈/</id>
    <published>2018-04-10T16:00:00.000Z</published>
    <updated>2018-04-11T08:22:31.282Z</updated>
    
    <content type="html"><![CDATA[<p>最近需要做一个监控项目，最终要达到的目的是实现对公司整个业务系统健康状况的实时监控。在出现问题的时候，通过这套系统可以快速准确的定位到问题的所在并通知到相关人员去解决问题。同时需要给领导有一个简洁直观的显示见面好让他掌控全局…在此记录一下整个调研过程。<br><a id="more"></a></p>
<h2 id="开源监控系统"><a href="#开源监控系统" class="headerlink" title="开源监控系统"></a>开源监控系统</h2><p>首先想到的当然是看看有没有现成的开源的(:。这里有一篇文章讲的很好，<a href="https://blog.csdn.net/linux_shuai/article/details/51322790" target="_blank" rel="external">著名的开源监控“五大郎”</a>。现在公司已经在用的监控系统，但是目前自己的定制化做的不太好,所以想基于现有的zabbix的数据以及一些自己push的业务数据，用小米的open-falcon框架以及一些前端控件来做。</p>
<ul>
<li><p><a href="https://www.zabbix.com/" target="_blank" rel="external">Zabbix</a><br>.NET使用Zabbix Api，<a href="https://github.com/Vidlec/Zabbix.NET" target="_blank" rel="external">Zabbix.NET</a>。其实很简单，用到了.NET提供的动态类型ExpandoObject。需要注意的是，对于加了basic认证的Zabbix server如果用于basic认证的用户名密码和使用Zabbix Api的用户名密码不一样的情况，Zabbix.NET的作者没有考虑到…可以自行下载代码加一个构造函数就好了.</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">public</span> Zabbix(<span class="keyword">string </span>user, <span class="keyword">string </span>password, <span class="keyword">string </span>zabbixURL, <span class="keyword">bool </span><span class="keyword">basicAuth, </span><span class="keyword">string </span><span class="keyword">basicAuthUser, </span><span class="keyword">string </span><span class="keyword">basicAuthPassword)</span></div><div class="line">        &#123;</div><div class="line">            this.user = user<span class="comment">;</span></div><div class="line">            this.password = password<span class="comment">;</span></div><div class="line">            this.zabbixURL = zabbixURL<span class="comment">;</span></div><div class="line">            <span class="meta">if</span> (<span class="keyword">basicAuth) </span>this.<span class="keyword">basicAuth </span>= System.Convert.ToBase64String(System<span class="meta">.Text</span>.Encoding.GetEncoding(<span class="string">"ISO-8859-1"</span>).GetBytes(<span class="keyword">basicAuthUser </span>+ <span class="string">":"</span> + <span class="keyword">basicAuthPassword));</span></div><div class="line">            auth = null<span class="comment">;</span></div><div class="line">        &#125;</div></pre></td></tr></table></figure>
</li>
<li><p><a href="http://open-falcon.org/" target="_blank" rel="external">open-falcon</a><br>Push数据的接口比较简单，直接组装它需要的json数据Post过去就好。</p>
</li>
</ul>
<h2 id="涉及到的一些技术"><a href="#涉及到的一些技术" class="headerlink" title="涉及到的一些技术"></a>涉及到的一些技术</h2><ul>
<li><a href="https://redis.io/" target="_blank" rel="external">Redis</a><br>这个就不用说了，自行百度吧。</li>
<li><a href="https://www.elastic.co/products/elasticsearch" target="_blank" rel="external">Elastic Search</a><br>主要用来做应用配置等数据的存储搜索以及快速查询。</li>
<li><a href="http://www.rabbitmq.com/tutorials/tutorial-two-python.html" target="_blank" rel="external">RabbitMqQueue</a><br>RabbitMQ是一个消息代理，从“生产者”接收消息并传递消息至“消费者”，期间可根据规则路由、缓存、持久化消息。</li>
<li><a href="https://www.cnblogs.com/cielosun/p/6762550.html" target="_blank" rel="external">JSON-RPC</a></li>
<li><a href="https://grafana.com/" target="_blank" rel="external">Grafana</a><br>Grafana是一个可视化面板（Dashboard），有着非常漂亮的图表和布局展示，功能齐全的度量仪表盘和图形编辑器，支持Graphite、zabbix、InfluxDB、Prometheus和OpenTSDB(open-falcon)作为数据源。</li>
<li><a href="http://www.jtopo.com/index.html" target="_blank" rel="external">jTopo</a><br>jTopo（Javascript Topology library)是一款完全基于HTML5 Canvas的关系、拓扑图形化界面开发工具包。</li>
<li><a href="https://d3js.org/" target="_blank" rel="external">d3.js</a><br>D3 的全称是（Data-Driven Documents），顾名思义可以知道是一个被数据驱动的文档。听名字有点抽象，说简单一点，其实就是一个 JavaScript 的函数库，使用它主要是用来做数据可视化的。如果你不知道什么是 JavaScript ，请先学习一点 JavaScript 的基础知识。</li>
<li><a href="http://www.lepus.cc/" target="_blank" rel="external">Lepus 天兔</a><br>开源的、高效的企业级生产数据库监控系统。</li>
<li><a href="http://kafka.apache.org/" target="_blank" rel="external">Kafka</a><br>Kafka是由Apache软件基金会开发的一个开源流处理平台，由Scala和Java编写。Kafka是一种高吞吐量的分布式发布订阅消息系统，它可以处理消费者规模的网站中的所有动作流数据。 对于kafka的监控目前网上有很多方案，个人觉得可定制化比较高的方式是用jmxtrans。</li>
</ul>
<p>目前项目还处于初步开发阶段，就先记录到这吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近需要做一个监控项目，最终要达到的目的是实现对公司整个业务系统健康状况的实时监控。在出现问题的时候，通过这套系统可以快速准确的定位到问题的所在并通知到相关人员去解决问题。同时需要给领导有一个简洁直观的显示见面好让他掌控全局…在此记录一下整个调研过程。&lt;br&gt;
    
    </summary>
    
    
      <category term="监控, 数据库监控, 应用监控" scheme="http://yoursite.com/tags/%E7%9B%91%E6%8E%A7-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9B%91%E6%8E%A7-%E5%BA%94%E7%94%A8%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET调用开源ip地址库ip2region小记</title>
    <link href="http://yoursite.com/2018/02/26/ASP.NET%E8%B0%83%E7%94%A8%E5%BC%80%E6%BA%90ip%E5%9C%B0%E5%9D%80%E5%BA%93ip2region%E5%B0%8F%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/02/26/ASP.NET调用开源ip地址库ip2region小记/</id>
    <published>2018-02-25T16:00:00.000Z</published>
    <updated>2018-04-11T03:07:48.617Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做一个asp.net的项目，其中有个功能是根据输入的ip地址得到相对应的省市信息。目前网上有很多相关的服务，但是要么是收费的要么就是使用上有限制（每秒查询次数限制）。经过一番搜索，终于在github上发现了一个开源的准确率99.9%的ip地址定位库<a href="https://github.com/lionsoul2014/ip2region" target="_blank" rel="external">ip2region</a>。它目前提供了java,php,c,python,nodejs,golang查询绑定，竟然没有提供C#查询绑定…不过还好，我们有<a href="https://justinzhou.github.io/2017/12/21/C%20sharp%E8%B0%83%E7%94%A8C++%20dll%E4%B9%8BPInvoke%E7%82%B9%E6%BB%B4%E6%80%BB%E7%BB%93/" target="_blank" rel="external">P/Invoke调用</a>。</p>
<a id="more"></a>
<h2 id="封装生成动态库"><a href="#封装生成动态库" class="headerlink" title="封装生成动态库"></a>封装生成动态库</h2><p>首先，下载ip2region源码。创建一个C++的动态库工程，将ip2region.h和ip2region.cpp(对ip2region.c直接改名)文件包含进来，直接编译生成动态库ip2region.dll。</p>
<h2 id="P-Invoke调用"><a href="#P-Invoke调用" class="headerlink" title="P/Invoke调用"></a>P/Invoke调用</h2><p>应用<a href="http://download.microsoft.com/download/f/2/7/f279e71e-efb0-4155-873d-5554a0608523/CLRInsideOut2008_01.exe" target="_blank" rel="external">P/Invoke Interop Assistant GUI Tool</a>工具，生成对应的C#导出类。</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Util</span></div><div class="line">&#123;</div><div class="line">    <span class="comment"><span class="doctag">///</span> Return Type: unsigned int</span></div><div class="line">    <span class="comment"><span class="doctag">///</span>ip2rObj: ip2region_entry*</span></div><div class="line">    <span class="comment"><span class="doctag">///</span>dbFile: char*</span></div><div class="line">    [System.Runtime.InteropServices.DllImportAttribute(<span class="string">@"ip2region.dll"</span>, EntryPoint = <span class="string">"ip2region_create"</span>, CallingConvention = CallingConvention.Cdecl)]</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">uint</span> <span class="title">ip2region_create</span>(<span class="params"><span class="keyword">ref</span> ip2region_entry ip2rObj, <span class="keyword">string</span> dbFile</span>)</span>;</div><div class="line">    <span class="comment"><span class="doctag">///</span> Return Type: unsigned int</span></div><div class="line">    <span class="comment"><span class="doctag">///</span>ip2rObj: ip2region_entry*</span></div><div class="line">    [System.Runtime.InteropServices.DllImportAttribute(<span class="string">@"ip2region.dll"</span>, EntryPoint = <span class="string">"ip2region_destroy"</span>, CallingConvention = CallingConvention.Cdecl)]</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">uint</span> <span class="title">ip2region_destroy</span>(<span class="params"><span class="keyword">ref</span> ip2region_entry ip2rObj</span>)</span>;</div><div class="line">    <span class="comment"><span class="doctag">///</span> Return Type: unsigned int</span></div><div class="line">    <span class="comment"><span class="doctag">///</span>ip2rObj: ip2region_entry*</span></div><div class="line">    <span class="comment"><span class="doctag">///</span>ip: char*</span></div><div class="line">    <span class="comment"><span class="doctag">///</span>datablock: datablock_entry*</span></div><div class="line">    [System.Runtime.InteropServices.DllImportAttribute(<span class="string">@"ip2region.dll"</span>, EntryPoint = <span class="string">"ip2region_btree_search_string"</span>, CallingConvention = CallingConvention.Cdecl)]</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">uint</span> <span class="title">ip2region_btree_search_string</span>(<span class="params"><span class="keyword">ref</span> ip2region_entry ip2rObj, <span class="keyword">string</span> ip, <span class="keyword">ref</span> datablock_entry datablock</span>)</span>;</div><div class="line">    <span class="comment"><span class="doctag">///</span> Return Type: unsigned int</span></div><div class="line">    <span class="comment"><span class="doctag">///</span>ip2rObj: ip2region_entry*</span></div><div class="line">    <span class="comment"><span class="doctag">///</span>ip: char*</span></div><div class="line">    <span class="comment"><span class="doctag">///</span>datablock: datablock_entry*</span></div><div class="line">    [System.Runtime.InteropServices.DllImportAttribute(<span class="string">@"ip2region.dll"</span>, EntryPoint = <span class="string">"ip2region_binary_search_string"</span>, CallingConvention = CallingConvention.Cdecl)]</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">uint</span> <span class="title">ip2region_binary_search_string</span>(<span class="params"><span class="keyword">ref</span> ip2region_entry ip2rObj, <span class="keyword">string</span> ip, <span class="keyword">ref</span> datablock_entry datablock</span>)</span>;</div><div class="line">    <span class="comment"><span class="doctag">///</span> Return Type: unsigned int</span></div><div class="line">    <span class="comment"><span class="doctag">///</span>ip2rObj: ip2region_entry*</span></div><div class="line">    <span class="comment"><span class="doctag">///</span>ip: char*</span></div><div class="line">    <span class="comment"><span class="doctag">///</span>datablock: datablock_entry*</span></div><div class="line">    [System.Runtime.InteropServices.DllImportAttribute(<span class="string">@"ip2region.dll"</span>, EntryPoint = <span class="string">"ip2region_memory_search_string"</span>, CallingConvention = CallingConvention.Cdecl)]</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">uint</span> <span class="title">ip2region_memory_search_string</span>(<span class="params"><span class="keyword">ref</span> ip2region_entry ip2rObj, <span class="keyword">string</span> ip, <span class="keyword">ref</span> datablock_entry datablock</span>)</span>;</div><div class="line">&#125;</div><div class="line">[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]</div><div class="line"><span class="keyword">public</span> <span class="keyword">struct</span> ip2region_entry</div><div class="line">&#123;</div><div class="line">    <span class="comment"><span class="doctag">///</span> unsigned int*</span></div><div class="line">    <span class="keyword">public</span> System.IntPtr HeaderSip;</div><div class="line">    <span class="comment"><span class="doctag">///</span> unsigned int*</span></div><div class="line">    <span class="keyword">public</span> System.IntPtr HeaderPtr;</div><div class="line">    <span class="comment"><span class="doctag">///</span> unsigned int</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">uint</span> headerLen;</div><div class="line">    <span class="comment"><span class="doctag">///</span> char*</span></div><div class="line">    [System.Runtime.InteropServices.MarshalAsAttribute(System.Runtime.InteropServices.UnmanagedType.LPStr)]</div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> dbFile;</div><div class="line">    <span class="comment"><span class="doctag">///</span> void*</span></div><div class="line">    <span class="keyword">public</span> System.IntPtr dbHandler;</div><div class="line">    <span class="comment"><span class="doctag">///</span> char*</span></div><div class="line">    [System.Runtime.InteropServices.MarshalAsAttribute(System.Runtime.InteropServices.UnmanagedType.LPStr)]</div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> dbBinStr;</div><div class="line">    <span class="comment"><span class="doctag">///</span> unsigned int</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">uint</span> firstIndexPtr;</div><div class="line">    <span class="comment"><span class="doctag">///</span> unsigned int</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">uint</span> lastIndexPtr;</div><div class="line">    <span class="comment"><span class="doctag">///</span> unsigned int</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">uint</span> totalBlocks;</div><div class="line">&#125;</div><div class="line">[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential, CharSet = System.Runtime.InteropServices.CharSet.Ansi)]</div><div class="line"><span class="keyword">public</span> <span class="keyword">struct</span> datablock_entry</div><div class="line">&#123;</div><div class="line">    <span class="comment"><span class="doctag">///</span> unsigned int</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">uint</span> city_id;</div><div class="line">    <span class="comment"><span class="doctag">///</span> char[256]</span></div><div class="line">    [System.Runtime.InteropServices.MarshalAsAttribute(System.Runtime.InteropServices.UnmanagedType.ByValTStr, SizeConst = <span class="number">256</span>)]</div><div class="line">    <span class="keyword">public</span> <span class="keyword">string</span> region;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里需要注意的是，函数的调用方式需设置为CallingConvention = CallingConvention.Cdecl。同时，对于导出函数的名称最好用dependens工具查看一下。因为C++对于有些调用方式为了实现重载会重命名导出函数名。</p>
<p><img src="/img/32dllfuncExp.jpg" alt="32位ip2region.dll Cdecl导出函数列表"></p>
<p>写代码进行调用：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">ip2region_entry ip2rObj = <span class="keyword">new</span> ip2region_entry();</div><div class="line">datablock_entry datablockObj = <span class="keyword">new</span> datablock_entry();</div><div class="line"><span class="keyword">uint</span> createRet = Util.ip2region_create(<span class="keyword">ref</span> ip2rObj, <span class="string">"ip2region.db"</span>);</div><div class="line">Util.ip2region_btree_search_string(<span class="keyword">ref</span> ip2rObj, ipStr, <span class="keyword">ref</span> datablockObj);</div><div class="line"><span class="comment"><span class="doctag">///</span>ip2region.db需要强制使用utf-8编码，默认就是在linux下生成的。而windows下是ANSI编码，故需要做一次转换。</span></div><div class="line"><span class="keyword">string</span> resultStr = Helper.GetOfUtf8(Encoding.Default.GetBytes(datablockObj.region));</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Helper</span></div><div class="line">&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">string</span> <span class="title">GetOfUtf8</span>(<span class="params"><span class="keyword">byte</span>[] strObj</span>)</span></div><div class="line">    &#123;</div><div class="line">        <span class="comment"><span class="doctag">///</span>开始解码 </span></div><div class="line">        System.Text.Decoder utf8Decoder = System.Text.Encoding.UTF8.GetDecoder();</div><div class="line">        <span class="keyword">int</span> charCount = utf8Decoder.GetCharCount(strObj, <span class="number">0</span>, strObj.Length);</div><div class="line">        Char[] chars = <span class="keyword">new</span> Char[charCount];</div><div class="line">        <span class="keyword">int</span> charsDecodedCount = utf8Decoder.GetChars(strObj, <span class="number">0</span>, strObj.Length, chars, <span class="number">0</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">string</span>(chars);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="动态库路径限制"><a href="#动态库路径限制" class="headerlink" title="动态库路径限制"></a>动态库路径限制</h2><p>在将工程部署到测试环境中时发现，必须将ip2region.dll放在固定的目录下才行。因为System.Runtime.InteropServices.DllImportAttribute要求路径必须是固定的，不可动态去指定。可是，这样的话就会给维护和部署带来不便，有没有什么办法可以动态的去获得ip2region.dll路径并将它load起来呢？在参考了几篇网文之后找到了一种方法，就是调用windows加载动态库的api（LoadLibrary, GetProcAddress, FreeLibrary）并通过C#的委托来实现调用。代码如下：<br><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DllInvoke</span></div><div class="line">&#123;</div><div class="line">    [DllImport(<span class="string">"kernel32.dll"</span>)]</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> IntPtr <span class="title">LoadLibrary</span>(<span class="params">String path</span>)</span>;</div><div class="line">    [DllImport(<span class="string">"kernel32.dll"</span>)]</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> IntPtr <span class="title">GetProcAddress</span>(<span class="params">IntPtr lib, String funcName</span>)</span>;</div><div class="line">    [DllImport(<span class="string">"kernel32.dll"</span>)]</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">bool</span> <span class="title">FreeLibrary</span>(<span class="params">IntPtr lib</span>)</span>;</div><div class="line">    <span class="keyword">private</span> IntPtr hLib;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DllInvoke</span>(<span class="params">String DLLPath</span>)</span></div><div class="line">    &#123;</div><div class="line">        hLib = LoadLibrary(DLLPath);</div><div class="line">    &#125;</div><div class="line">    ~DllInvoke()</div><div class="line">    &#123;</div><div class="line">        FreeLibrary(hLib);</div><div class="line">    &#125;</div><div class="line">    <span class="comment"><span class="doctag">///</span>将要执行的函数转换为委托</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Delegate <span class="title">Invoke</span>(<span class="params">String APIName, Type t</span>)</span></div><div class="line">    &#123;</div><div class="line">        IntPtr api = GetProcAddress(hLib, APIName);</div><div class="line">        <span class="keyword">return</span> (Delegate)Marshal.GetDelegateForFunctionPointer(api, t);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">funcExport</span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">private</span> DllInvoke dll;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">string</span> x86Dll = <span class="string">"ip2region.dll"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">string</span> x64Dll = <span class="string">"ip2region64.dll"</span>;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">bool</span> isValid &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">delegate</span> <span class="keyword">uint</span> <span class="title">ip2RegionCreateD</span>(<span class="params"><span class="keyword">ref</span> ip2region_entry ip2rObj, <span class="keyword">string</span> dbFile</span>)</span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">delegate</span> <span class="keyword">uint</span> <span class="title">ip2RegionDestroy</span>(<span class="params"><span class="keyword">ref</span> ip2region_entry ip2rObj</span>)</span>;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">delegate</span> <span class="keyword">uint</span> <span class="title">ip2RegionBtreeSearchString</span>(<span class="params"><span class="keyword">ref</span> ip2region_entry ip2rObj, <span class="keyword">string</span> ip, <span class="keyword">ref</span> datablock_entry datablock</span>)</span>;</div><div class="line">    <span class="keyword">public</span> funcExport.ip2RegionCreateD createDIns;</div><div class="line">    <span class="keyword">public</span> funcExport.ip2RegionDestroy destoryDIns;</div><div class="line">    <span class="keyword">public</span> funcExport.ip2RegionBtreeSearchString bSearchDIns;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">funcExport</span>(<span class="params"><span class="keyword">string</span> dllPath</span>)</span></div><div class="line">    &#123;</div><div class="line">        isValid = <span class="literal">true</span>;</div><div class="line">        <span class="keyword">var</span> dllFile = System.IO.Path.Combine(dllPath, x64Dll);</div><div class="line">        dll = <span class="keyword">new</span> DllInvoke();</div><div class="line">        <span class="keyword">if</span> (dll.DllLoad(dllFile))</div><div class="line">        &#123;</div><div class="line">            createDIns =</div><div class="line">                (funcExport.ip2RegionCreateD) dll.Invoke(<span class="string">"ip2region_create"</span>, <span class="keyword">typeof</span> (funcExport.ip2RegionCreateD));</div><div class="line">            destoryDIns =</div><div class="line">                (funcExport.ip2RegionDestroy) dll.Invoke(<span class="string">"ip2region_destroy"</span>, <span class="keyword">typeof</span> (funcExport.ip2RegionDestroy));</div><div class="line">            bSearchDIns =</div><div class="line">                (funcExport.ip2RegionBtreeSearchString)</div><div class="line">                    dll.Invoke(<span class="string">"ip2region_btree_search_string"</span>, <span class="keyword">typeof</span> (funcExport.ip2RegionBtreeSearchString));</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            dllFile = System.IO.Path.Combine(dllPath, x86Dll); ;</div><div class="line">            <span class="keyword">if</span> (dll.DllLoad(dllFile))</div><div class="line">            &#123;</div><div class="line">                createDIns =</div><div class="line">                    (funcExport.ip2RegionCreateD)</div><div class="line">                        dll.Invoke(<span class="string">"_ip2region_create@8"</span>, <span class="keyword">typeof</span> (funcExport.ip2RegionCreateD));</div><div class="line">                destoryDIns =</div><div class="line">                    (funcExport.ip2RegionDestroy)</div><div class="line">                        dll.Invoke(<span class="string">"_ip2region_destroy@4"</span>, <span class="keyword">typeof</span> (funcExport.ip2RegionDestroy));</div><div class="line">                bSearchDIns =</div><div class="line">                    (funcExport.ip2RegionBtreeSearchString)</div><div class="line">                        dll.Invoke(<span class="string">"_ip2region_btree_search_string@12"</span>,</div><div class="line">                            <span class="keyword">typeof</span> (funcExport.ip2RegionBtreeSearchString));</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                isValid = <span class="literal">false</span>;</div><div class="line">            &#125;            </div><div class="line">        &#125;         </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>细心的网友可能已经发现，在funcExport类中我会进行两次加载尝试，分别是32位和64位ip2region动态库。为什么会有如此操作呢？因为，在我将ASP.NET的工程部署到测试环境中时发现程序不再work了，甚至还抛出了异常…<br>通过调试发现，原本加载32位的ip2region.dll没有成功，可是为什么在我调试的时候是可以正常load的呢？<br>原来，我是部署在64位的Win server 2008上，默认的应用程序池是运行在64位模式下的，是不允许调用32位的dll的。</p>
<blockquote>
<p>在 IIS 7.x 中，要“启用 32bit 应用程序支持”，需要对“应用程序池”进行配置。将“enable32BitAppOnWin64”设置为“True”。这样便将应用程序池的工作进程设置为 WOW64 模式，而在 WOW64 模式下，工作进程将仅加载 32 位应用程序的 32 位进程。</p>
</blockquote>
<p><img src="/img/applicationpoolSet.png" alt="应用程序池设置启用32bit应用程序支持"></p>
<p>而本地调试之所以可以load是因为设置的开发模式是Any CPU并且是设置的IIS express进行调试，那么也就没有IIS application中的限制了。</p>
<p>可是也不能为了这个而让整个网站程序运行在WoW64模式呀，这样肯定会影响性能的。所以就有了以上两次加载尝试，先加载64位的动态库，若失败的话则再加载32位的动态库。这里有一点需要注意的是，由于这种方式不能指定函数调用方式，而.NET的默认调用方式是Stdcall，所以在生成动态库的时候将调用约定设置为stdcall。<br><img src="/img/callDecal.jpg" alt="设置dll调用约定"><br>至此本篇完。总结如下：</p>
<ul>
<li><strong><em>.NET调用C/C++动态库时除了用Framework提供的方法DllImportAttribute外还可通过调用kernel32.dll中的（LoadLibrary, GetProcAddress, FreeLibrary）来实现。</em></strong></li>
<li><strong><em>P/Invoke调用时需注意函数的调用约定一致。</em></strong></li>
<li><strong><em>若要64位系统上的IIS支持跑32位的程序或调用32位的动态库，需要启用32bit应用程序支持.</em></strong></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在做一个asp.net的项目，其中有个功能是根据输入的ip地址得到相对应的省市信息。目前网上有很多相关的服务，但是要么是收费的要么就是使用上有限制（每秒查询次数限制）。经过一番搜索，终于在github上发现了一个开源的准确率99.9%的ip地址定位库&lt;a href=&quot;https://github.com/lionsoul2014/ip2region&quot;&gt;ip2region&lt;/a&gt;。它目前提供了java,php,c,python,nodejs,golang查询绑定，竟然没有提供C#查询绑定…不过还好，我们有&lt;a href=&quot;https://justinzhou.github.io/2017/12/21/C%20sharp%E8%B0%83%E7%94%A8C++%20dll%E4%B9%8BPInvoke%E7%82%B9%E6%BB%B4%E6%80%BB%E7%BB%93/&quot;&gt;P/Invoke调用&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="C#, C++, P/Invoke, ip2region" scheme="http://yoursite.com/tags/C-C-P-Invoke-ip2region/"/>
    
  </entry>
  
  <entry>
    <title>.NET异步编程杂谈（转）</title>
    <link href="http://yoursite.com/2018/01/05/doNET%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E6%9D%82%E8%B0%88%EF%BC%88%E8%BD%AC%EF%BC%89/"/>
    <id>http://yoursite.com/2018/01/05/doNET异步编程杂谈（转）/</id>
    <published>2018-01-04T16:00:00.000Z</published>
    <updated>2018-04-11T02:09:38.166Z</updated>
    
    <content type="html"><![CDATA[<p>此文记载一些.NET异步编程相关的总结性观点。<br><a id="more"></a></p>
<ul>
<li>async/await 在ASP.NET做的最大贡献（早期ASP.NET的异步开发模式同样也有这样的贡献），是在访问数据库的时候、访问远程IO的时候及时释放了当前的处理性程，可以让这些线程回到线程池中，从而实现可以去处理其它请求的功能。</li>
<li>异步的ASP.NET开发能够在处理能力上带来多大的提高，取决于我们的程序有多少时间是被阻塞的，也就是那些访问数据库和远程Service的时间。</li>
<li>除了将代码改成异步，我们还需要在IIS上做一些相对的配置来实现最优化。</li>
<li>不管是ASP.NET、WinForm还是Mobile、还是平板，在大型系统中都只是一个与用户交互的端而已，所以不管你现在是做所谓的前端（JavaScript + CSS等)，还是所谓的后端(ASP.NET MVC、WCF、Web API 等 )，又或者是比较时髦的移动端（IOS也好，Andrioid也罢，哪怕是不争气的WP），都只是整个大型系统中的零星一角而已。当然我并不是贬低这些端的价值，正是因为我们专注于不同，努力提高每一个端的用户体验，才能让这些大型系统有露脸的机会。我想说的是，在你对现在技术取得一定的成就之后，不要停止学习，因为整个软件架构体系中还有很多很多美妙的东西值得我们去发现。</li>
<li>APM和EAP是在async/await之前的两种不同的异步编程模式。</li>
<li>APM如果不阻塞主线程，那么完成通知（回调）就会执行在另外一个线程中，从而给我们更新UI带来一定的问题。</li>
<li>EAP的通知事件是在主线程中执行的，不会存在UI交互的问题。</li>
<li>最后，我们还学习了在Winform下不同线程之间交互的问题，以及SynchronizationContext。</li>
<li>APM是.NET下最早的异步编程方法，从.NET1.0以来就有了。在.NET2.0的时候，微软意识到了APM的回调函数中与UI交互的问题，于是带来了新的EAP。APM与EAP一直共存到.NET3.5，在.NET4.0的时候微软带来了TPL，也就是我们所熟知的Task编程，而.NET4.5就是我们大家知道的async/await了，可以看到.NET一直在不停的进步，加上最近不断的和开源社区的合作，跨平台等特性的引入，我们有理由相信.NET会越走越好。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此文记载一些.NET异步编程相关的总结性观点。&lt;br&gt;
    
    </summary>
    
    
      <category term=".NET, 异步编程" scheme="http://yoursite.com/tags/NET-%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>前端表格插件DataTables使用小记</title>
    <link href="http://yoursite.com/2017/12/25/%E5%89%8D%E7%AB%AF%E8%A1%A8%E6%A0%BC%E6%8F%92%E4%BB%B6DataTables%E4%BD%BF%E7%94%A8%E5%B0%8F%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/12/25/前端表格插件DataTables使用小记/</id>
    <published>2017-12-24T16:00:00.000Z</published>
    <updated>2018-04-11T02:09:19.922Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做一个网站的改版项目，开了一次需求会（尼玛需求文档都没有，对着PS图呱呱了半天），给了一个月时间，100多个页面，几十个特效，而且最坑爹的是80%都是前端工作。当时内心真的是有千万只草泥马在奔腾。额，扯远了…回到正题，由于之前的项目代码比较老旧而且不易于扩展和维护，所以需要重建项目并且要做到模块化及可配置。网站中用到了大量的表格来显示数据并且这些表格定义有可能经常需要变动，所以领导的意思是最好能将其做成可配置易于维护和改动的。经过一番搜索，最终确定了用一款jquery表格插件<a href="http://datatables.club/index.html" target="_blank" rel="external">Datatables</a>。它是一个高度灵活的工具，可以将任何HTML表格添加高级的交互功能。<br><a id="more"></a></p>
<p>至于Datatables简单的应用就不再赘述，可参考它的官方文档。这里讲述一下在项目中应用时遇到的一些问题以及解决办法。</p>
<h2 id="整体框架"><a href="#整体框架" class="headerlink" title="整体框架"></a>整体框架</h2><p>由于网站的并发数据访问量比较大，而且已经有了通用的做过抗压处理的数据接口（以web API的形式提供）。所以我们只需要关注怎么实现将数据接口的数据实时动态可配置的呈现出来。<br><img src="/img/datatables_overview.png" alt="整体框架图"></p>
<h2 id="数据绑定与配置文件的定义"><a href="#数据绑定与配置文件的定义" class="headerlink" title="数据绑定与配置文件的定义"></a>数据绑定与配置文件的定义</h2><p>数据接口返回的数据格式类似于数据库中一行一行的数据，并且大多数接口是通用的。而且对于返回的数据，不同的表格需要显示的列是不一样的。如下图所示：<br><img src="/img/datatables_tableDef.png" alt="数据接口与表格"><br>由于返回的数据并非Json格式的数据，所以数据绑定采用了数组的形式。</p>
<p>为了做到完全的可配置化，定义的配置文件格式如下：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"tbReqParams"</span>: [</div><div class="line">      &#123;</div><div class="line">        <span class="attr">"tableName"</span>: <span class="string">"table1"</span>,</div><div class="line">        <span class="attr">"requestParam"</span>: <span class="string">"xxxx"</span>,</div><div class="line">        <span class="attr">"columns"</span>: <span class="string">"1-2-3-5-4"</span></div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        <span class="attr">"tableName"</span>: <span class="string">"table2"</span>,</div><div class="line">        <span class="attr">"requestParam"</span>: <span class="string">"xxxx"</span>,</div><div class="line">        <span class="attr">"columns"</span>: <span class="string">"1-2-5-6-8"</span></div><div class="line">      &#125;</div><div class="line">    ],</div><div class="line">    <span class="attr">"creatRowCallback"</span>: <span class="string">"renderTableHelper.createRow"</span>,</div><div class="line">    <span class="attr">"dtb"</span>: &#123;</div><div class="line">      <span class="attr">"columns"</span>: [</div><div class="line">        &#123;</div><div class="line">          <span class="attr">"title"</span>: <span class="string">"市场"</span>,</div><div class="line">          <span class="attr">"name"</span>: <span class="string">"(MarketType)"</span>,</div><div class="line">          <span class="attr">"dataIndex"</span>: <span class="number">0</span></div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          <span class="attr">"title"</span>: <span class="string">"代码"</span>,</div><div class="line">          <span class="attr">"name"</span>: <span class="string">"(Code)"</span>,</div><div class="line">          <span class="attr">"dataIndex"</span>: <span class="number">1</span></div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          <span class="attr">"title"</span>: <span class="string">"名称"</span>,</div><div class="line">          <span class="attr">"name"</span>: <span class="string">"(Name)"</span>,</div><div class="line">          <span class="attr">"dataIndex"</span>: <span class="number">2</span>,</div><div class="line">          <span class="attr">"render"</span>: <span class="string">"renderCommon.getCommonCodeLink"</span></div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          <span class="attr">"title"</span>: <span class="string">"最新价"</span>,</div><div class="line">          <span class="attr">"name"</span>: <span class="string">"(Close)"</span>,</div><div class="line">          <span class="attr">"dataIndex"</span>: <span class="number">3</span></div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          <span class="attr">"title"</span>: <span class="string">"涨跌幅"</span>,</div><div class="line">          <span class="attr">"name"</span>: <span class="string">"(ChangePercent)"</span>,</div><div class="line">          <span class="attr">"dataIndex"</span>: <span class="number">4</span>,</div><div class="line">          <span class="attr">"render"</span>: <span class="string">"renderCommon.getChangePercent"</span></div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          <span class="attr">"title"</span>: <span class="string">"涨跌额"</span>,</div><div class="line">          <span class="attr">"name"</span>: <span class="string">"(Change)"</span>,</div><div class="line">          <span class="attr">"dataIndex"</span>: <span class="number">5</span></div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          <span class="attr">"title"</span>: <span class="string">"最高"</span>,</div><div class="line">          <span class="attr">"name"</span>: <span class="string">"(High)"</span>,</div><div class="line">          <span class="attr">"dataIndex"</span>: <span class="number">6</span></div><div class="line">        &#125;,</div><div class="line">        &#123;</div><div class="line">          <span class="attr">"title"</span>: <span class="string">"最低"</span>,</div><div class="line">          <span class="attr">"name"</span>: <span class="string">"(Low)"</span>,</div><div class="line">          <span class="attr">"dataIndex"</span>: <span class="number">7</span></div><div class="line">        &#125;,</div><div class="line">		&#123;</div><div class="line">          <span class="attr">"title"</span>: <span class="string">"换手率"</span>,</div><div class="line">          <span class="attr">"name"</span>: <span class="string">"(TurnoverRate)"</span>,</div><div class="line">          <span class="attr">"dataIndex"</span>:<span class="number">8</span></div><div class="line">        &#125;</div><div class="line">      ]</div><div class="line">    &#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure></p>
<p>整个配置文件采用了Json的格式。其中”tbReqParams”里的每一条配置代码一个表格，例如：<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="string">"tableName"</span>: <span class="string">"table1"</span>,    <span class="comment">//table名字，绑定时传送给datatable的table id</span></div><div class="line">    <span class="string">"requestParam"</span>: <span class="string">"xxxx"</span>,    <span class="comment">//Web API请求数据参数</span></div><div class="line">    <span class="string">"columns"</span>: <span class="string">"1-2-3-5-4"</span>    <span class="comment">//需要显示的列以及其顺序,索引从0开始</span></div><div class="line">&#125;,</div></pre></td></tr></table></figure></p>
<p><code>&quot;creatRowCallback&quot;: &quot;renderTableHelper.createRow&quot;</code>是用来动态绑定Datatables控件的createdRow事件的，主要用来改变表格中的样式（例如给数据添加颜色，加粗显示等）。主要实现代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">eval</span>(<span class="string">"var createRowCallB ="</span> + selected_table.creatRowCallback);</div><div class="line"><span class="keyword">var</span> t = $(tableParams.tableID).DataTable(</div><div class="line">        &#123;</div><div class="line">			......</div><div class="line">			createdRow: createRowCallB,</div><div class="line">		&#125;</div><div class="line">)</div><div class="line"></div><div class="line">createRow: <span class="function"><span class="keyword">function</span> (<span class="params">row, data, dataIndex</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> index = <span class="keyword">this</span>.renderIndex;</div><div class="line">    <span class="keyword">var</span> minus = <span class="built_in">parseFloat</span>(data[index.CloseIndex]);</div><div class="line">    <span class="keyword">var</span> colorClose = getTextColor(minus);</div><div class="line">    $(<span class="string">'td'</span>, row).eq(index.CloseIndexDisplay).css(<span class="string">'color'</span>, colorClose);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中index.CloseIndex以及index.CloseIndexDisplay的定义与作用可见前端数据定制化小节。</p>
<figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">dtb<span class="string">": &#123;</span></div><div class="line">  "columns<span class="string">": [</span></div><div class="line">    &#123;</div><div class="line">      "<span class="built_in">title</span><span class="string">": "</span>市场<span class="string">",</span></div><div class="line">      "name<span class="string">": "</span>(MarketType)<span class="string">",</span></div><div class="line">      "dataIndex<span class="string">": 0</span></div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">      "<span class="built_in">title</span><span class="string">": "</span>代码<span class="string">",</span></div><div class="line">      "name<span class="string">": "</span>(<span class="built_in">Code</span>)<span class="string">",</span></div><div class="line">      "dataIndex<span class="string">": 1</span></div><div class="line">    &#125;,</div><div class="line">	......</div></pre></td></tr></table></figure>
<p>columns为对应的Web API返回的列的定义，title是显示的列头，name用来做定制化数据时使用，dataIndex用来标示该列对应Web API返回的数据的哪一列。</p>
<h2 id="前端数据定制化"><a href="#前端数据定制化" class="headerlink" title="前端数据定制化"></a>前端数据定制化</h2><p>由于前端显示的部分列需要做特殊处理，例如名称列需要加跳转链接，而跳转链接是由该条数据的市场(MarketType)，代码(Code)和url前缀拼接出来的。这里应用了Datatables中为每一列定义的render函数：</p>
<figure class="highlight maxima"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="built_in">var</span> j = <span class="number">0</span>; j &lt; selected_table.dtb.<span class="built_in">columns</span>.<span class="built_in">length</span>; j++) &#123;</div><div class="line">    <span class="built_in">eval</span>(<span class="string">"var a = "</span> + selected_table.dtb.<span class="built_in">columns</span>[j].render);</div><div class="line">    selected_table.dtb.<span class="built_in">columns</span>[j].render = a;</div><div class="line">	...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>配置文件中定义需要绑定的render函数<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">      <span class="attr">"title"</span>: <span class="string">"名称"</span>,</div><div class="line">      <span class="attr">"name"</span>: <span class="string">"(Name)"</span>,</div><div class="line">      <span class="attr">"dataIndex"</span>: <span class="number">2</span>,</div><div class="line">      <span class="attr">"render"</span>: <span class="string">"renderCommon.getCommonCodeLink"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在Render函数定义文件Renders.js文件中定义相应函数：</p>
<figure class="highlight roboconf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var renderCommon = &#123;</div><div class="line">    ......</div><div class="line">	<span class="attribute">getCommonReleateLink</span>: function (data, type, row, meta) &#123;</div><div class="line">		return getSingleLink(gubaBaseUrl, '', row[meta<span class="variable">.settings</span><span class="variable">.nTable</span><span class="variable">.renderIndex</span><span class="variable">.CodeIndex</span>], "股吧") + ' '</div><div class="line">			+ getSingleLink(zjlBaseUrl, '', row[meta<span class="variable">.settings</span><span class="variable">.nTable</span><span class="variable">.renderIndex</span><span class="variable">.CodeIndex</span>], "资金流") + ' '</div><div class="line">			+ getSingleLink(yanbaoBaseUrl, '', row[meta<span class="variable">.settings</span><span class="variable">.nTable</span><span class="variable">.renderIndex</span><span class="variable">.CodeIndex</span>], "研报");</div><div class="line">	&#125;</div><div class="line">	......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里需要注意的是meta.settings.nTable.renderIndex.CodeIndex代表的是Code这列在绑定到Datatables之后的数据源中的索引，同样的上一节中提到的index.CloseIndex代表Close这列在绑定到Datatables之后的数据源中的索引。而index.CloseIndexDisplay代表的则是最终显示的时候Close这列的索引，这里大家可能会有疑问为什么CloseIndex和CloseDisplayIndex不一样呢？因为在对Name列做特殊处理的时候需要Code列的数据，所以在绑定Datatables数据源的时候采用的策略是所有的接口列都绑定进去，根据”columns”: “2-3-4-5-6”得到需要显示的列并把它的visible及bVisible属性置为true，而其他的则置为false。这样就造成了CloseIndex和CloseDisplayIndex不一样。<br>为了动态获取这些索引， 应用了Datatables的preDrawCallback函数。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">var</span> t = $(tableParams.tableID).DataTable(</div><div class="line">        &#123;</div><div class="line">			......</div><div class="line">			preDrawCallback: renderCommon<span class="selector-class">.getRenderColumnsIndex</span>,</div><div class="line">		&#125;</div><div class="line">)</div></pre></td></tr></table></figure>
<p>Renders.js</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> renderCommon = &#123;</div><div class="line"></div><div class="line">getRenderColumnsIndex: <span class="function"><span class="keyword">function</span> (<span class="params">settings</span>) </span>&#123;</div><div class="line">    settings.nTable.renderIndex = <span class="keyword">new</span> renderColIndex();</div><div class="line">    <span class="keyword">var</span> hidenCols = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; settings.aoColumns.length; i++) &#123;</div><div class="line">        <span class="keyword">if</span> (settings.aoColumns[i].bVisible === <span class="literal">false</span>)</div><div class="line">            hidenCols += <span class="number">1</span>;</div><div class="line">        <span class="comment">//动态设置相应的Index及IndexDisplay</span></div><div class="line">        <span class="keyword">var</span> columnName = settings.aoColumns[i].sName.substr(<span class="number">1</span>, settings.aoColumns[i].sName.length - <span class="number">2</span>);</div><div class="line">        <span class="built_in">eval</span>(<span class="string">"settings.nTable.renderIndex."</span> + columnName + <span class="string">"Index = "</span> + i + <span class="string">";"</span>);</div><div class="line">        <span class="built_in">eval</span>(<span class="string">"settings.nTable.renderIndex."</span> + columnName + <span class="string">"IndexDisplay = "</span> + (i - hidenCols) + <span class="string">";"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">this</span>.renderIndex = settings.nTable.renderIndex;</div><div class="line">&#125;,</div><div class="line">......</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="服务器端分页"><a href="#服务器端分页" class="headerlink" title="服务器端分页"></a>服务器端分页</h2><p>由于每页最多显示20条数据，如果每次都请求接口的所有数据的话。一来会造成资源浪费，二来也会降低程序的响应速度，所以最好是每次只请求需要的数据。关于Datatables服务器端分页定义及基本实现可见 <a href="http://datatables.club/manual/server-side.html" target="_blank" rel="external">服务器处理 Server-side processing</a>。当你打开服务器模式的时候，每次绘制表格的时候，DataTables 会给服务器发送一个请求（包括当前分页，排序，搜索参数等等）。DataTables 会向 服务器发送 一些参数 去执行所需要的处理，然后在服务器组装好 相应的数据 返回给 DataTables。<br>项目的数据返回接口已经存在了很久，并且会被其他项目或程序用到，是不能随便改动的。所以就不能应用常规的服务端分页实现方式。还好，接口支持传递page以及pageSize参数，同时提供能总条数total的返回。这里用到的是模拟服务端分页请求及返回来实现服务端分页功能的。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">ajax: <span class="function"><span class="keyword">function</span> (<span class="params">data, callback, settings</span>) </span>&#123;</div><div class="line">                $.getScript(reqUrl, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                    <span class="keyword">var</span> rawRecords = []; <span class="comment">//接口返回的数据</span></div><div class="line">                    <span class="keyword">var</span> data1 = <span class="built_in">eval</span>(jsDataName);</div><div class="line">                    <span class="keyword">var</span> obj = data1.rank;</div><div class="line">                    <span class="keyword">var</span> count = data1.pages;</div><div class="line">                    <span class="keyword">var</span> total = data1.total;</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; obj.length; i++) &#123;</div><div class="line">                        <span class="keyword">var</span> temp = obj[i].split(<span class="string">","</span>);</div><div class="line">                        rawRecords.push(temp);</div><div class="line">                    &#125;					</div><div class="line">                    <span class="keyword">var</span> allRecords = [];  <span class="comment">//根据后端配置文件重新组合的用来显示的数据</span></div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; rawRecords.length; i++) <span class="comment">//一行数据</span></div><div class="line">                    &#123;</div><div class="line">                        <span class="keyword">var</span> adjustRow = [];</div><div class="line">                        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; adjustColumn.length; j++) &#123;</div><div class="line">                            <span class="keyword">if</span> (adjustColumn[j].dataIndex != <span class="number">-1</span>) &#123;</div><div class="line">                                adjustRow.push(rawRecords[i][adjustColumn[j].dataIndex]);</div><div class="line">                            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                                adjustRow.push(<span class="number">0</span>);</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                        allRecords.push(adjustRow);</div><div class="line">                    &#125;				</div><div class="line">					<span class="comment">//模拟服务器返回的数据结构</span></div><div class="line">                    <span class="keyword">var</span> returnData = &#123;&#125;;</div><div class="line">                    returnData.draw = data.draw;<span class="comment">//这里直接自行返回了draw计数器,本来应该由后台返回</span></div><div class="line">                    returnData.recordsTotal = total;<span class="comment">//返回数据全部记录</span></div><div class="line">                    returnData.recordsFiltered = total;<span class="comment">//后台不实现过滤功能，每次查询均视作全部结果</span></div><div class="line">                    returnData.data = allRecords;<span class="comment">//返回的数据列表</span></div><div class="line">                    callback(returnData);</div><div class="line">                &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其实也就是自己封装服务器需要返回的数据(Returned data)，并调用calllback。当然，得先开启服务器端分页功能，设置serverSide: true。</p>
<h2 id="一点建议"><a href="#一点建议" class="headerlink" title="一点建议"></a>一点建议</h2><p>由于Datatables控件比较复杂，所以要想很好的去掌握它，除了认真的去研读它的文档，最重要的是要善于运用浏览器的调试功能，多加断点，这样才能看清每一个函数或结构所返回的数据，进而得到自己可以用的属性或api。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在做一个网站的改版项目，开了一次需求会（尼玛需求文档都没有，对着PS图呱呱了半天），给了一个月时间，100多个页面，几十个特效，而且最坑爹的是80%都是前端工作。当时内心真的是有千万只草泥马在奔腾。额，扯远了…回到正题，由于之前的项目代码比较老旧而且不易于扩展和维护，所以需要重建项目并且要做到模块化及可配置。网站中用到了大量的表格来显示数据并且这些表格定义有可能经常需要变动，所以领导的意思是最好能将其做成可配置易于维护和改动的。经过一番搜索，最终确定了用一款jquery表格插件&lt;a href=&quot;http://datatables.club/index.html&quot;&gt;Datatables&lt;/a&gt;。它是一个高度灵活的工具，可以将任何HTML表格添加高级的交互功能。&lt;br&gt;
    
    </summary>
    
    
      <category term="Datatables，前端表格，开源" scheme="http://yoursite.com/tags/Datatables%EF%BC%8C%E5%89%8D%E7%AB%AF%E8%A1%A8%E6%A0%BC%EF%BC%8C%E5%BC%80%E6%BA%90/"/>
    
  </entry>
  
  <entry>
    <title>C#调用C++ dll之P/Invoke点滴总结</title>
    <link href="http://yoursite.com/2017/12/21/C%20sharp%E8%B0%83%E7%94%A8C++%20dll%E4%B9%8BPInvoke%E7%82%B9%E6%BB%B4%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/12/21/C sharp调用C++ dll之PInvoke点滴总结/</id>
    <published>2017-12-20T16:00:00.000Z</published>
    <updated>2018-04-11T02:09:05.414Z</updated>
    
    <content type="html"><![CDATA[<p>P/Invoke的全称是Platform Invoke (平台调用),它实际上是一种函数调用机制通 过P/Invoke我们就可以调用非托管DLL中的函数。<br>P／Invoke依次执行以下操作:</p>
<ul>
<li>查找包含该函数的非托管DLL</li>
<li>将该非托管DLL加载到内存中</li>
<li>查找函数在内存中的地址并将其参数按照函数的调用约定压栈</li>
<li>将控制权转移给非托管函数</li>
</ul>
<a id="more"></a>
<p><img src="/img/pinvoke.jpg" alt="P/Invoke调用示意图"></p>
<p>由于项目需要用到了C#代码调用C++的动态库，期间遇到了参数封装与传送的问题，记录于此。</p>
<ul>
<li>对于不对称的结构体数组，最好定义紧凑型排列以避免编译器自动做字节对齐。</li>
</ul>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">[System.<span class="keyword">Runtime</span>.InteropServices.StructLayoutAttribute(System.<span class="keyword">Runtime</span>.InteropServices.LayoutKind.Sequential, CharSet = System.<span class="keyword">Runtime</span>.InteropServices.CharSet.Ansi, Pack=<span class="number">1</span>)]</div><div class="line"><span class="keyword">public</span> struct SRawStockDict</div><div class="line">&#123;</div><div class="line">    <span class="comment">/// UINT32-&gt;unsigned int</span></div><div class="line">    <span class="keyword">public</span> uint m_dwStockID;</div><div class="line">    <span class="comment">/// char</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">byte</span> m_cMarket;</div><div class="line">    <span class="comment">/// char</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">byte</span> m_cType;</div><div class="line">    <span class="comment">/// char[23]</span></div><div class="line">    [System.<span class="keyword">Runtime</span>.InteropServices.MarshalAsAttribute(System.<span class="keyword">Runtime</span>.InteropServices.UnmanagedType.ByValTStr, SizeConst = <span class="number">23</span>)]</div><div class="line">    <span class="keyword">public</span> string m_cCode;</div><div class="line">    <span class="comment">/// char[23]</span></div><div class="line">    [System.<span class="keyword">Runtime</span>.InteropServices.MarshalAsAttribute(System.<span class="keyword">Runtime</span>.InteropServices.UnmanagedType.ByValTStr, SizeConst = <span class="number">23</span>)]</div><div class="line">    <span class="keyword">public</span> string m_cName;</div><div class="line">    <span class="comment">/// char[31]</span></div><div class="line">    [System.<span class="keyword">Runtime</span>.InteropServices.MarshalAsAttribute(System.<span class="keyword">Runtime</span>.InteropServices.UnmanagedType.ByValTStr, SizeConst = <span class="number">31</span>)]</div><div class="line">    <span class="keyword">public</span> string m_cNameEx;</div><div class="line">    <span class="comment">/// char</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">byte</span> m_cFlag;</div><div class="line">    <span class="comment">/// UINT32-&gt;unsigned int</span></div><div class="line">    <span class="keyword">public</span> uint m_dwObjID;</div><div class="line">    <span class="comment">/// char</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">byte</span> m_cOptType;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如上，若不加Pack=1。那么用Marshal.Sizeof(typeof(SRawStockDict))获取到的大小是92。加上Pack=1之后得到的大小就是89，这样在传入被调用的C++函数中不会出错。</p>
<ul>
<li>若导出的C++函数中有指向结构体数组的指针，并且该参数既会作为输入也会作为输出。那么类型匹配如：</li>
</ul>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">C</span>++</div><div class="line">SRawStockDict *pNew</div><div class="line"><span class="keyword">C</span>#</div><div class="line">[<span class="keyword">In</span>, <span class="keyword">Out</span>] SRawStockDict[] pNew</div></pre></td></tr></table></figure>
<p>对于SRawStockDict *&amp;pNew 这种特殊的情况 ，若有必要的话可以把C++函数再封装一层，在内部再做一次赋值。同时调用的时候就做好空间申请。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">SRawStockDict[] sRawStockDict = new SRawStockDict[20000];</div><div class="line">for (int i = 0; i &lt; sRawStockDict.Length; i++)</div><div class="line"> &#123;</div><div class="line">      sRawStockDict[i] = new SRawStockDict();</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<ul>
<li>char[ ]可直接用byte[ ]作为匹配输入。</li>
</ul>
<p>最后，推荐一个专门用来做P/Invoke参数及类型转换的工具。<br><a href="http://download.microsoft.com/download/f/2/7/f279e71e-efb0-4155-873d-5554a0608523/CLRInsideOut2008_01.exe" target="_blank" rel="external">P/Invoke Interop Assistant GUI Tool</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;P/Invoke的全称是Platform Invoke (平台调用),它实际上是一种函数调用机制通 过P/Invoke我们就可以调用非托管DLL中的函数。&lt;br&gt;P／Invoke依次执行以下操作:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查找包含该函数的非托管DLL&lt;/li&gt;
&lt;li&gt;将该非托管DLL加载到内存中&lt;/li&gt;
&lt;li&gt;查找函数在内存中的地址并将其参数按照函数的调用约定压栈&lt;/li&gt;
&lt;li&gt;将控制权转移给非托管函数&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="C#, C++, P/Invoke" scheme="http://yoursite.com/tags/C-C-P-Invoke/"/>
    
  </entry>
  
  <entry>
    <title>OpenSSL与fPIC</title>
    <link href="http://yoursite.com/2016/11/18/OpenSSL%E4%B8%8EfPIC/"/>
    <id>http://yoursite.com/2016/11/18/OpenSSL与fPIC/</id>
    <published>2016-11-17T16:00:00.000Z</published>
    <updated>2018-04-11T02:08:31.967Z</updated>
    
    <content type="html"><![CDATA[<p>看到标题大家可能会想，openssl和fPIC会有什么关系呢？这要从最近遇到的一个问题说起。由于openssl去年和今年被爆出了很多漏洞，而我们项目中用到了openssl较老的版本，所以需要重新编译openssl的新版本。这本应该是一间很简单的事，可是却遇到了问题。在RedHat 7.x平台上，编译之后的程序在跑的时候直接crash了，而且奇怪的是在RedHat AS4平台上没有问题。<br><a id="more"></a><br>废话不多说，上错误栈:<br><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Program terminated <span class="keyword">with</span> signal <span class="number">11</span>, Segmentation fault.</div><div class="line"><span class="string">#0</span> <span class="number">0</span>xf7779875c <span class="keyword">in</span> sha1_block_data_order () <span class="keyword">from</span> /opt/xxx/xxx/libxxx.so</div><div class="line"><span class="string">#1</span> <span class="number">0</span>xf7797926 <span class="keyword">in</span> SHA1_Update () <span class="keyword">from</span> /opt/xxx/xxx/libxxx.so</div><div class="line"><span class="string">#2</span> <span class="number">0</span>x00000000 <span class="keyword">in</span> ?? ()</div></pre></td></tr></table></figure></p>
<p>以<code>sha1_block_data_order</code>为关键字经过一番搜索，发现网上也有遇到类似crash问题的人。给出的解释是，因为多线程调用，openssl在多线程调用时为了保证线程安全，需要在每个调用线程里明确设置两个callback函数。引用如下：</p>
<blockquote>
<p>Is OpenSSL thread-safe?<br>Yes (with limitations: an SSL connection may not concurrently be used by multiple threads). On Windows and many Unix systems, OpenSSL automatically uses the multi-threaded versions of the standard libraries. If your platform is not one of these, consult the INSTALL file.</p>
<p>Multi-threaded applications must provide two callback functions to OpenSSL by calling CRYPTO_set_locking_callback() and CRYPTO_set_id_callback(), for all versions of OpenSSL up to and including 0.9.8[abc…]. As of version 1.0.0, CRYPTO_set_id_callback() and associated APIs are deprecated by CRYPTO_THREADID_set_callback() and friends. This is described in the threads(3) manpage.</p>
</blockquote>
<p>本以为找着了问题的原因，然而在仔细搜索了代码之后发现我们已经设置了这两个callback。然后自己在redhat 7.3上面写了一个demo程序去调用，单线程的竟然也会crash！不过还好，本地可以复现。重新编译了一个debug版本的程序，用gdb一步一步的去跟。最后获取了比较详细的调用栈：<br><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">sha1_block_data_order ()</div><div class="line">#<span class="number">0</span>  SHA1_Update (c=<span class="number">0x80d7f60</span>, data_=<span class="number">0xbfff5fe0</span>, len=<span class="number">8</span>) <span class="meta">at</span> ../md32_common.h:<span class="number">307</span></div><div class="line">#<span class="number">1</span>  <span class="number">0x40350e27</span> <span class="keyword">in</span> update (ctx=<span class="number">0xbfff5fa0</span>, data=<span class="number">0xbfff5fe0</span>, count=<span class="number">8</span>) <span class="meta">at</span> m_sha1.c:<span class="number">80</span></div><div class="line">#<span class="number">2</span>  <span class="number">0x4034879a</span> <span class="keyword">in</span> EVP_DigestUpdate (ctx=<span class="number">0xbfff5fa0</span>, data=<span class="number">0xbfff5fe0</span>, count=<span class="number">8</span>)</div><div class="line">    <span class="meta">at</span> digest.c:<span class="number">244</span></div><div class="line">#<span class="number">3</span>  <span class="number">0x403e1bb3</span> <span class="keyword">in</span> ssleay_rand_add (buf=<span class="number">0xbfff61c0</span>, num=<span class="number">32</span>, <span class="keyword">add</span>=<span class="number">32</span>) <span class="meta">at</span> md_rand.c:<span class="number">288</span></div><div class="line">#<span class="number">4</span>  <span class="number">0x40345cdc</span> <span class="keyword">in</span> RAND_add (buf=<span class="number">0xbfff61c0</span>, num=<span class="number">32</span>, entropy=<span class="number">32</span>) <span class="meta">at</span> rand_lib.c:<span class="number">152</span></div><div class="line">#<span class="number">5</span>  <span class="number">0x403e298b</span> <span class="keyword">in</span> RAND_poll () <span class="meta">at</span> rand_unix.c:<span class="number">405</span></div><div class="line">#<span class="number">6</span>  <span class="number">0x403e24c3</span> <span class="keyword">in</span> ssleay_rand_status () <span class="meta">at</span> md_rand.c:<span class="number">578</span></div><div class="line">#<span class="number">7</span>  <span class="number">0x40345de4</span> <span class="keyword">in</span> RAND_status () <span class="meta">at</span> rand_lib.c:<span class="number">175</span></div><div class="line">#<span class="number">8</span>  <span class="number">0x40294a39</span> <span class="keyword">in</span> _seedPRNG () <span class="meta">at</span> xxx.cpp:<span class="number">65</span></div></pre></td></tr></table></figure></p>
<p>程序出错在程序给openssl发送随机种子时调用的<code>sha1_block_data_order</code>函数里，以下是此函数的定义：<br><figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line">$A=<span class="string">"eax"</span>;</div><div class="line">$B=<span class="string">"ebx"</span>;</div><div class="line">$C=<span class="string">"ecx"</span>;</div><div class="line">$D=<span class="string">"edx"</span>;</div><div class="line">$E=<span class="string">"edi"</span>;</div><div class="line">$T=<span class="string">"esi"</span>;</div><div class="line">$tmp1=<span class="string">"ebp"</span>;</div><div class="line"></div><div class="line">&amp;function_begin(<span class="string">"sha1_block_data_order"</span>);</div><div class="line">	&amp;mov($tmp1,&amp;wparam(<span class="number">0</span>));	<span class="comment"># SHA_CTX *c</span></div><div class="line">	&amp;mov($T,&amp;wparam(<span class="number">1</span>));	<span class="comment"># const void *input</span></div><div class="line">	&amp;mov($A,&amp;wparam(<span class="number">2</span>));	<span class="comment"># size_t num</span></div><div class="line">	&amp;stack_push(<span class="number">16</span>);	<span class="comment"># allocate X[16]</span></div><div class="line">	&amp;shl($A,<span class="number">6</span>);</div><div class="line">	&amp;add($A,$T);</div><div class="line">	&amp;mov(&amp;wparam(<span class="number">2</span>),$A);	<span class="comment"># pointer beyond the end of input</span></div><div class="line">	&amp;mov($E,&amp;DWP(<span class="number">16</span>,$tmp1));<span class="comment"># pre-load E</span></div><div class="line"></div><div class="line">	&amp;set_label(<span class="string">"loop"</span>,<span class="number">16</span>);</div><div class="line"></div><div class="line">	<span class="comment"># copy input chunk to X, but reversing byte order!</span></div><div class="line">	<span class="keyword">for</span> ($i=<span class="number">0</span>; $i&lt;<span class="number">16</span>; $i+=<span class="number">4</span>)</div><div class="line">		&#123;</div><div class="line">		&amp;mov($A,&amp;DWP(<span class="number">4</span>*($i+<span class="number">0</span>),$T));</div><div class="line">		&amp;mov($B,&amp;DWP(<span class="number">4</span>*($i+<span class="number">1</span>),$T));</div><div class="line">		&amp;mov($C,&amp;DWP(<span class="number">4</span>*($i+<span class="number">2</span>),$T));</div><div class="line">		&amp;mov($D,&amp;DWP(<span class="number">4</span>*($i+<span class="number">3</span>),$T));</div><div class="line">		&amp;bswap($A);</div><div class="line">		&amp;bswap($B);</div><div class="line">		&amp;bswap($C);</div><div class="line">		&amp;bswap($D);</div><div class="line">		&amp;mov(&amp;swtmp($i+<span class="number">0</span>),$A);</div><div class="line">		&amp;mov(&amp;swtmp($i+<span class="number">1</span>),$B);</div><div class="line">		&amp;mov(&amp;swtmp($i+<span class="number">2</span>),$C);</div><div class="line">		&amp;mov(&amp;swtmp($i+<span class="number">3</span>),$D);</div><div class="line">		&#125;</div><div class="line">	&amp;mov(&amp;wparam(<span class="number">1</span>),$T);	<span class="comment"># redundant in 1st spin</span></div><div class="line"></div><div class="line">	&amp;mov($A,&amp;DWP(<span class="number">0</span>,$tmp1));	<span class="comment"># load SHA_CTX</span></div><div class="line">	&amp;mov($B,&amp;DWP(<span class="number">4</span>,$tmp1));</div><div class="line">	&amp;mov($C,&amp;DWP(<span class="number">8</span>,$tmp1));</div><div class="line">	&amp;mov($D,&amp;DWP(<span class="number">12</span>,$tmp1));</div><div class="line">	<span class="comment"># E is pre-loaded</span></div><div class="line"></div><div class="line">	<span class="keyword">for</span>($i=<span class="number">0</span>;$i&lt;<span class="number">16</span>;$i++)	&#123; &amp;BODY_00_15($i,@V); <span class="keyword">unshift</span>(@V,<span class="keyword">pop</span>(@V)); &#125;</div><div class="line">	<span class="keyword">for</span>(;$i&lt;<span class="number">20</span>;$i++)	&#123; &amp;BODY_16_19($i,@V); <span class="keyword">unshift</span>(@V,<span class="keyword">pop</span>(@V)); &#125;</div><div class="line">	<span class="keyword">for</span>(;$i&lt;<span class="number">40</span>;$i++)	&#123; &amp;BODY_20_39($i,@V); <span class="keyword">unshift</span>(@V,<span class="keyword">pop</span>(@V)); &#125;</div><div class="line">	<span class="keyword">for</span>(;$i&lt;<span class="number">60</span>;$i++)	&#123; &amp;BODY_40_59($i,@V); <span class="keyword">unshift</span>(@V,<span class="keyword">pop</span>(@V)); &#125;</div><div class="line">	<span class="keyword">for</span>(;$i&lt;<span class="number">80</span>;$i++)	&#123; &amp;BODY_20_39($i,@V); <span class="keyword">unshift</span>(@V,<span class="keyword">pop</span>(@V)); &#125;</div><div class="line"></div><div class="line">	(($V[<span class="number">5</span>] eq $D) <span class="keyword">and</span> ($V[<span class="number">0</span>] eq $E)) <span class="keyword">or</span> <span class="keyword">die</span>;	<span class="comment"># double-check</span></div><div class="line"></div><div class="line">	&amp;mov($tmp1,&amp;wparam(<span class="number">0</span>));	<span class="comment"># re-load SHA_CTX*</span></div><div class="line">	&amp;mov($D,&amp;wparam(<span class="number">1</span>));	<span class="comment"># D is last "T" and is discarded</span></div><div class="line"></div><div class="line">	&amp;add($E,&amp;DWP(<span class="number">0</span>,$tmp1));	<span class="comment"># E is last "A"...</span></div><div class="line">	&amp;add($T,&amp;DWP(<span class="number">4</span>,$tmp1));</div><div class="line">	&amp;add($A,&amp;DWP(<span class="number">8</span>,$tmp1));</div><div class="line">	&amp;add($B,&amp;DWP(<span class="number">12</span>,$tmp1));</div><div class="line">	&amp;add($C,&amp;DWP(<span class="number">16</span>,$tmp1));</div><div class="line"></div><div class="line">	&amp;mov(&amp;DWP(<span class="number">0</span>,$tmp1),$E);	<span class="comment"># update SHA_CTX</span></div><div class="line">	 &amp;add($D,<span class="number">64</span>);		<span class="comment"># advance input pointer</span></div><div class="line">	&amp;mov(&amp;DWP(<span class="number">4</span>,$tmp1),$T);</div><div class="line">	 &amp;cmp($D,&amp;wparam(<span class="number">2</span>));	<span class="comment"># have we reached the end yet?</span></div><div class="line">	&amp;mov(&amp;DWP(<span class="number">8</span>,$tmp1),$A);</div><div class="line">	 &amp;mov($E,$C);		<span class="comment"># C is last "E" which needs to be "pre-loaded"</span></div><div class="line">	&amp;mov(&amp;DWP(<span class="number">12</span>,$tmp1),$B);</div><div class="line">	 &amp;mov($T,$D);		<span class="comment"># input pointer</span></div><div class="line">	&amp;mov(&amp;DWP(<span class="number">16</span>,$tmp1),$C);</div><div class="line">	&amp;jb(&amp;label(<span class="string">"loop"</span>));</div><div class="line"></div><div class="line">	&amp;stack_pop(<span class="number">16</span>);</div><div class="line">&amp;function_end(<span class="string">"sha1_block_data_order"</span>);</div></pre></td></tr></table></figure></p>
<p>可以发现其中用到了大量的寄存器，eax/ebx/ecx/edx等。后来突然联想到在编译openssl的时候我们加上了-fPIC选项，fPIC作用于编译阶段，告诉编译器产生与位置无关代码(Position-Independent Code)，则产生的代码中，没有绝对地址，全部使用相对地址，故而代码可以被加载器加载到内存的任意位置，都可以正确的执行。那么会不会是-fPIC选项对于内嵌汇编代码的支持不好造成的呢。于是重新编译了一下openssl的库，问题果然解决了。<br>在问题解决之后又做了一些research，找到了一篇文章“<a href="http://blog.itpub.net/67063/viewspace-169190/" target="_blank" rel="external">gcc指定-fPIC编译的时候内嵌汇编需要注意的问题</a>”。其中有提到：</p>
<blockquote>
<p>gcc在生成位置无关代码的时候，内部使用了ebx作为基址寄存器。如果不使用内嵌汇编，那么gcc自然会帮助你维持ebx的值始终有效。但是如果使用了内嵌汇编，gcc常常就有点力不从心了，所以这时候，一定要自己留意保存好ebx的值。</p>
</blockquote>
<p>所以造成<code>sha1_block_data_order</code> crash的原因应该就是其中用到了ebx，而且没有自己去保存好它。而对于位置无关的代码内部使用了ebx作为基址寄存器，所以就出现了Segmentation fault。可是还有一个问题，为什么redhat AS4平台上也用了fPIC而没有问题呢。我想这应该是因为老版本的编译器对于这种情况的handle不是很好。因为redhat 7.x的gcc版本确实比较低了些。<br>希望我跨过的这个坑会对后来人有所帮助。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看到标题大家可能会想，openssl和fPIC会有什么关系呢？这要从最近遇到的一个问题说起。由于openssl去年和今年被爆出了很多漏洞，而我们项目中用到了openssl较老的版本，所以需要重新编译openssl的新版本。这本应该是一间很简单的事，可是却遇到了问题。在RedHat 7.x平台上，编译之后的程序在跑的时候直接crash了，而且奇怪的是在RedHat AS4平台上没有问题。&lt;br&gt;
    
    </summary>
    
    
      <category term="Openssl, fPIC, sha1_block_data_order, crash" scheme="http://yoursite.com/tags/Openssl-fPIC-sha1-block-data-order-crash/"/>
    
  </entry>
  
  <entry>
    <title>Nhibernate batch query timeout问题的解决</title>
    <link href="http://yoursite.com/2016/09/06/Nhibernate%20batch%20query%20timeout%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/"/>
    <id>http://yoursite.com/2016/09/06/Nhibernate batch query timeout问题的解决/</id>
    <published>2016-09-05T16:00:00.000Z</published>
    <updated>2018-04-11T02:08:01.954Z</updated>
    
    <content type="html"><![CDATA[<p>最近项目中遇到了一个奇怪的问题。在调用Nhibernate去更新数据库的时候不定期的会出现timeout exception：<br><code>NHibernate.HibernateException: An exception occurred when executing batch queries ---&gt; System.Data.SqlClient.SqlException: Timeout expired.  The timeout period elapsed prior to completion of the operation or the server is not responding.</code></p>
<a id="more"></a>
<p>由于之前没有出现过此类问题而且代码和环境都没有变过，所以首先想到的是数据库的问题导致的。于是叫上DBA一起把数据库日志翻了一遍，然而并没发现什么异常，最终归结为数据库性能问题，他们也没什么办法…<br>此刻一句名言飘荡在我的脑海之中<strong><em>Fuck the world if you are rich, otherwise fuck yourself.</em></strong><br>好吧，从程序上入手看看有没有什么办法规避或者解决这个问题。首先重新查看了我们自己出错的日志，发现发生executing batch queries异常的时间都在30~35 sec，而这个异常是指执行数据库语句时抛的异常。而我们在Nhibernate的配置文件hibernate.cfg.xml中所配置的command_timeout是300sec，<code>&lt;property name=&quot;command_timeout&quot;&gt;300&lt;/property&gt;</code>。为什么这个配置没有生效呢？<br>在进行了海量搜索以及验证之后，终于<em>fuck myself success</em>。总结如下:</p>
<h2 id="两个对应关系"><a href="#两个对应关系" class="headerlink" title="两个对应关系"></a>两个对应关系</h2><ul>
<li>Connect String中加入的ConnectTimeOut  &lt;&lt;========&gt;&gt;  ADO.NET中SqlConnection.ConnectionTimeout：等待连接打开所需的时间（以秒为单位）。 默认值为 15 秒。<a href="https://msdn.microsoft.com/zh-cn/library/system.data.sqlclient.sqlconnection.connectiontimeout%28v=vs.110%29.aspx" target="_blank" rel="external">detail</a></li>
<li>Nhibernate中配置的IDbCommand的CommandTimeout  &lt;&lt;========&gt;&gt;  ADO.NET中SqlCommand.CommandTimeout：等待命令执行所需的时间（以秒为单位）。 默认值为 30 秒。<a href="https://msdn.microsoft.com/zh-cn/library/system.data.sqlclient.sqlcommand.commandtimeout%28v=vs.110%29.aspx" target="_blank" rel="external">detail</a></li>
</ul>
<h2 id="问题所在"><a href="#问题所在" class="headerlink" title="问题所在"></a>问题所在</h2><p>通过搜索发现在StackOver上也有人遇到过同样的问题。总结了一下大概意思是说：在设置了<property name="adonet.batch_size">10</property>属性之后，NHibernate会去指定用ADO.net去做批量更新。而在NHibernate中对于批量更新用到的类是SqlClientBatchingBatcher，这个类中所用到的command timeout值是从Environment.GlobalProperties中取得的。而配置文件hibernate.cfg.xml中所设置的command timeout是会用于创建SqlClientDriver for SQL Server时用于初始化DriveBase类的。<a href="http://ronaldrosiernet.azurewebsites.net/Blog/2013/04/20/timeout_in_nhibernate_batched_sessions" target="_blank" rel="external">detail</a><br>为了验证这个说法，下载了<a href="https://sourceforge.net/projects/nhibernate/files/NHibernate/" target="_blank" rel="external">NHibernate 2.1.2</a>。<br>SqlClientBatchingBatcher类中给command timeout赋值的代码如下：<br><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> SqlClientBatchingBatcher(ConnectionManager connectionManager, IInterceptor interceptor): base(connectionManager, interceptor)</div><div class="line">&#123;</div><div class="line">    batchSize = Factory.Settings.AdoBatchSize;</div><div class="line">    currentBatch = <span class="keyword">new</span> SqlClientSqlCommandSet();</div><div class="line">    SetCommandTimeout();</div><div class="line">    <span class="comment">//we always create this, because we need to deal with a scenario in which</span></div><div class="line">    <span class="comment">//the user change the logging configuration at runtime. Trying to put this</span></div><div class="line">    <span class="comment">//behind an if(log.IsDebugEnabled) will cause a null reference exception </span></div><div class="line">    <span class="comment">//at that point.</span></div><div class="line">    currentBatchCommandsLog = <span class="keyword">new</span> StringBuilder().AppendLine(<span class="string">"Batch commands:"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="function"><span class="keyword">void</span> <span class="title">SetCommandTimeout</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> timeout = PropertiesHelper.GetInt32(Cfg.Environment.CommandTimeout, Cfg.Environment.Properties, <span class="number">-1</span>);    ---&gt; look here</div><div class="line">    <span class="comment">//FileStream fs = new FileStream(@"batchCommandTimeOut.txt", FileMode.Create);</span></div><div class="line">    <span class="comment">//StreamWriter sw = new StreamWriter(fs);</span></div><div class="line">    <span class="comment">//sw.WriteLine("timeout = " + timeout.ToString());</span></div><div class="line">    <span class="comment">//sw.Flush();</span></div><div class="line">    <span class="comment">//sw.Close();</span></div><div class="line">    <span class="comment">//fs.Close();</span></div><div class="line">    <span class="keyword">if</span> (timeout &gt; <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">try</span></div><div class="line">        &#123;</div><div class="line">            currentBatch.CommandTimeout = timeout;  ---&gt; look here</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">catch</span> (Exception e)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (log.IsWarnEnabled)</div><div class="line">            &#123;</div><div class="line">                log.Warn(e.ToString());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可知取的是Cfg.Environment.CommandTimeout，而这个就对应的Global的配置。<br>而在DriveBase中对command timeout的赋值代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> IDbCommand <span class="title">GenerateCommand</span><span class="params">(CommandType type, SqlString sqlString, SqlType[] parameterTypes)</span></span></div><div class="line">&#123;</div><div class="line">    IDbCommand cmd = CreateCommand();</div><div class="line">    cmd.CommandType = type;</div><div class="line"></div><div class="line">    SetCommandTimeout(cmd, PropertiesHelper.GetInt32(Environment.CommandTimeout, Environment.Properties, <span class="number">-1</span>));</div><div class="line">    SetCommandText(cmd, sqlString);</div><div class="line">    SetCommandParameters(cmd, parameterTypes);</div><div class="line">    <span class="keyword">return</span> cmd;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SetCommandTimeout</span><span class="params">(IDbCommand cmd, object envTimeout)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (commandTimeout &gt;= <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        <span class="comment">//FileStream fs = new FileStream(@"DriveBaseCommandTimeOut.txt用来记录", FileMode.Create);</span></div><div class="line">        <span class="comment">//StreamWriter sw = new StreamWriter(fs);</span></div><div class="line">        <span class="comment">//sw.WriteLine("timeout = " + commandTimeout.ToString());</span></div><div class="line">        <span class="comment">//sw.Flush();</span></div><div class="line">        <span class="comment">//sw.Close();</span></div><div class="line">        <span class="comment">//fs.Close();</span></div><div class="line"></div><div class="line">        <span class="keyword">try</span></div><div class="line">        &#123;</div><div class="line">            cmd.CommandTimeout = commandTimeout;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">catch</span> (Exception e)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> (<span class="built_in">log</span>.IsWarnEnabled)</div><div class="line">            &#123;</div><div class="line">                <span class="built_in">log</span>.Warn(e.ToString());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可知这里是将commandTimout直接赋值给了cmd.CommandTimeout，而commandTimeout是会读取hibernate.cfg.xml这个配置文件的。所以在hibernate.cfg.xml中配置的command timeout为300是会作用到这里。</p>
<h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>对于batch query timeout的异常，我们可以通过加长SqlClientBatchingBatcher的command timeout来解决。具体怎么加有两种方法：</p>
<ol>
<li><p>在全局配置文件中配置NHibernate的command timeout，一般是App.config。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span><span class="meta">?&gt;</span></span></div><div class="line">  <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">configSections</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">section</span> <span class="attr">name</span>=<span class="string">"hibernate-configuration"</span> <span class="attr">type</span>=<span class="string">"NHibernate.Cfg.ConfigurationSectionHandler, NHibernate"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">configSections</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">hibernate-configuration</span>  <span class="attr">xmlns</span>=<span class="string">"urn:nhibernate-configuration-2.2"</span> &gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"adonet.batch_size"</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"command_timeout"</span>&gt;</span>300<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"proxyfactory.factory_class"</span>&gt;</span>NHibernate.ByteCode.Castle.ProxyFactoryFactory, NHibernate.ByteCode.Castle<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>在程序中，通过反射来设置全局的command timeout。</p>
<figure class="highlight vbnet"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">FieldInfo field = <span class="built_in">typeof</span>(<span class="keyword">global</span>::NHibernate.Cfg.Environment).GetField(<span class="string">"GlobalProperties"</span>, System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.<span class="keyword">Static</span>);</div><div class="line"></div><div class="line">Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt; gloablProperties = field.GetValue(null) <span class="keyword">as</span> Dictionary&lt;<span class="built_in">string</span>, <span class="built_in">string</span>&gt;;</div><div class="line"></div><div class="line">gloablProperties.Add(<span class="string">"command_timeout"</span>,<span class="string">"300"</span>);</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在更改了全局配置之后，生产环境中的timeout得到了解决。所以有些时候还是要多从内部找问题的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近项目中遇到了一个奇怪的问题。在调用Nhibernate去更新数据库的时候不定期的会出现timeout exception：&lt;br&gt;&lt;code&gt;NHibernate.HibernateException: An exception occurred when executing batch queries ---&amp;gt; System.Data.SqlClient.SqlException: Timeout expired.  The timeout period elapsed prior to completion of the operation or the server is not responding.&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Nhibernate, Timeout" scheme="http://yoursite.com/tags/Nhibernate-Timeout/"/>
    
  </entry>
  
  <entry>
    <title>二进制差量更新算法比较</title>
    <link href="http://yoursite.com/2016/08/30/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%B7%AE%E9%87%8F%E6%9B%B4%E6%96%B0%E7%AE%97%E6%B3%95%E6%AF%94%E8%BE%83/"/>
    <id>http://yoursite.com/2016/08/30/二进制差量更新算法比较/</id>
    <published>2016-08-29T16:00:00.000Z</published>
    <updated>2018-04-11T02:07:43.779Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>本文对目前比较流行的基于二进制差量更新算法的几个实现进行了一个比较。<br>差量更新算法的核心思想是尽可能多的利用old文件中已有的内容，尽可能少的加入新的内容来构建new文件。通常的做法是对old文件和new文件做子字符串匹配或使用hash技术，提取公共部分，将new文件中剩余的部分打包成patch包，在Patch阶段中，用copying和insertion两个基本操作即可将old文件和patch包合成new文件。<br><a id="more"></a><br><img src="/img/patching_diagram.jpg" alt="差量更新示意图">比较时主要基于以下标准：<br><img src="/img/compare_standard.jpg" alt="比较标准"></p>
<h2 id="Approach"><a href="#Approach" class="headerlink" title="Approach"></a>Approach</h2><p><img src="/img/diff_approach.jpg" alt="diff approach"></p>
<h2 id="Evaluation"><a href="#Evaluation" class="headerlink" title="Evaluation"></a>Evaluation</h2><p>Rdiff：做出的diff太大。<br>Bsdiff：它需要max(17<em>n,9</em>n+m)+O(1) bytes的内存，n是old文件的size，m是新文件的size。换句话说，它不能处理特别大的文件。<br>Courgetee：google的项目，初衷是减少Chrome的网络流量。基于bsdiff针对可执行文件类型做了些优化，所以它也不能处理太大的文件。<br>OpenVcdiff：它用了delta encoding算法(RFC3284)。它的实现是将old文件全部加载到内存中处理，所以它也不能处理太大文件。<br>zdelta：不支持windows平台，并且处理大文件时性能比较低。<br>xdelta3：采用delta encoding算法，支持特大文件，性能好并且平台独立。但是它遵循GPL v2 license，对商业应用不友好。<br>Rtpatch Server：rtpatch的增强版，提供了windows平台的多线程build功能。属于一款应用较广泛的商业软件。<br><img src="/img/compare_metrix.jpg" alt="比较矩阵"><br>接着从build diff的size和CPU以及内存消耗方面比较了一下rtpatchserver和xdelta3。<br><img src="/img/P.4.png" alt="build diff size compare"><br><img src="/img/compare_performance.jpg" alt="performance compare"></p>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>通过比较可以发现，若是商业应用的话满足所有标准的只有RtpatchServer。若是内部使用的话则xdelta3的表现明显好于其他。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;本文对目前比较流行的基于二进制差量更新算法的几个实现进行了一个比较。&lt;br&gt;差量更新算法的核心思想是尽可能多的利用old文件中已有的内容，尽可能少的加入新的内容来构建new文件。通常的做法是对old文件和new文件做子字符串匹配或使用hash技术，提取公共部分，将new文件中剩余的部分打包成patch包，在Patch阶段中，用copying和insertion两个基本操作即可将old文件和patch包合成new文件。&lt;br&gt;
    
    </summary>
    
    
      <category term="Delta Encoding, 差量更新, VCDiff, Rtpatch" scheme="http://yoursite.com/tags/Delta-Encoding-%E5%B7%AE%E9%87%8F%E6%9B%B4%E6%96%B0-VCDiff-Rtpatch/"/>
    
  </entry>
  
  <entry>
    <title>下载（2G以上）大文件支持小记</title>
    <link href="http://yoursite.com/2016/08/23/%E4%B8%8B%E8%BD%BD%EF%BC%882G%E4%BB%A5%E4%B8%8A%EF%BC%89%E5%A4%A7%E6%96%87%E4%BB%B6%E6%94%AF%E6%8C%81%E5%B0%8F%E8%AE%B0/"/>
    <id>http://yoursite.com/2016/08/23/下载（2G以上）大文件支持小记/</id>
    <published>2016-08-22T16:00:00.000Z</published>
    <updated>2018-04-11T02:07:24.778Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最近项目中遇到了下载大文件（大于2G）失败的问题。查看了代码之后发现从一开始实现的时候就没有考虑对大文件的支持<i class="fa fa-frown-o"></i>。老板追的紧，没办法只能硬着头皮上。整个的解决过程就好像打怪升级一般，一步一个脚印。<br><a id="more"></a></p>
<h2 id="Round-1"><a href="#Round-1" class="headerlink" title="Round 1"></a><strong>Round 1</strong></h2><h3 id="下载文件size每次都是2G"><a href="#下载文件size每次都是2G" class="headerlink" title="下载文件size每次都是2G"></a>下载文件size每次都是2G</h3><p>为什么每次下载的文件都是2G，明明在server端的文件是大于2G的。通过调试发现原来在下载的代码实现中，一些基本变量的定义都是int类型的，也就是说最大只能存储 $2^{31}-1$ 的正整数。所以需要将这些有影响的变量类型改为范围更大的类型。考虑到项目是多平台程序，所以参考了一下ANSI C/C++的基本数据类型：</p>
<table>
<thead>
<tr>
<th>Type</th>
<th style="text-align:center">Size</th>
<th style="text-align:left">数值范围</th>
</tr>
</thead>
<tbody>
<tr>
<td>无值型void</td>
<td style="text-align:center">0 byte</td>
<td style="text-align:left">无值域</td>
</tr>
<tr>
<td>布尔型bool</td>
<td style="text-align:center">1 byte</td>
<td style="text-align:left">true   false</td>
</tr>
<tr>
<td>有符号短整型short [int] /signed short [int]</td>
<td style="text-align:center">2 byte</td>
<td style="text-align:left">-32768~32767</td>
</tr>
<tr>
<td>无符号短整型unsigned short [int]</td>
<td style="text-align:center">2 byte</td>
<td style="text-align:left">0~65535</td>
</tr>
<tr>
<td>有符号整型int /signed [int]</td>
<td style="text-align:center">4 byte</td>
<td style="text-align:left">-2147483648~2147483647</td>
</tr>
<tr>
<td>无符号整型unsigned [int]</td>
<td style="text-align:center">4 byte</td>
<td style="text-align:left">0~4294967295</td>
</tr>
<tr>
<td>有符号长整型long [int]/signed long [int]</td>
<td style="text-align:center">4 byte</td>
<td style="text-align:left">-2147483648~2147483647</td>
</tr>
<tr>
<td>无符号长整型unsigned long [int]</td>
<td style="text-align:center">4 byte</td>
<td style="text-align:left">0~4294967295</td>
</tr>
<tr>
<td>有符号 long long</td>
<td style="text-align:center">8 byte</td>
<td style="text-align:left">-9223372036854775808~9223372036854775807</td>
</tr>
<tr>
<td>无符号long long</td>
<td style="text-align:center">8 byte</td>
<td style="text-align:left">0~18446744073709552000</td>
</tr>
<tr>
<td>有符号字符型char/signed char</td>
<td style="text-align:center">1 byte</td>
<td style="text-align:left">-128~127</td>
</tr>
<tr>
<td>无符号字符型unsigned char</td>
<td style="text-align:center">1 byte</td>
<td style="text-align:left">0~255</td>
</tr>
<tr>
<td>宽字符型wchar_t (unsigned short.)</td>
<td style="text-align:center">2 byte</td>
<td style="text-align:left">0~65535</td>
</tr>
<tr>
<td>单精度浮点型float</td>
<td style="text-align:center">4 byte</td>
<td style="text-align:left">-3.4E-38~3.4E+38</td>
</tr>
<tr>
<td>双精度浮点型double</td>
<td style="text-align:center">8 byte</td>
<td style="text-align:left">1.7E-308~1.7E+308</td>
</tr>
<tr>
<td>long double</td>
<td style="text-align:center">8 byte</td>
</tr>
</tbody>
</table>
<p>这里我们选用signed long long类型， 它可表示的最大的正整数是 $2^{63}-1$ ，足以应付4G的文件。增加如下定义：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> sint64_t_defined</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> sint64_t_defined</span></div><div class="line"><span class="keyword">typedef</span> <span class="keyword">signed</span> <span class="keyword">long</span> <span class="keyword">long</span>     Tsint64;<span class="comment">//It's illegal in C90. It's legel in C99. </span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure></p>
<p>接着把所有有影响的变量类型改为Tsint64。OK，第一关算是勉强通过了。</p>
<h2 id="Round-2"><a href="#Round-2" class="headerlink" title="Round 2"></a><strong>Round 2</strong></h2><h3 id="检查文件size失败"><a href="#检查文件size失败" class="headerlink" title="检查文件size失败"></a>检查文件size失败</h3><p>通过前面的努力，终于可以将大于2G的文件下下来了。可是好景不长，程序走到检查文件size的时候fail了。手工检查了下文件的size是没有问题的，但是程序中获取的size是一个很奇怪的数。其中获取size的代码如下：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">int</span> <span class="title">filelen</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *fname)</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (fname == <span class="literal">NULL</span> || fname[<span class="number">0</span>] == <span class="string">'\0'</span>)</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	FILE *fp = fopen (fname, <span class="string">"rb"</span>);</div><div class="line">	<span class="keyword">if</span> (!fp)</div><div class="line">		<span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">	fseek (fp, <span class="number">0</span>, SEEK_END);</div><div class="line">	<span class="keyword">long</span> length = ftell (fp);</div><div class="line">	fclose (fp);</div><div class="line">	<span class="keyword">return</span> length == <span class="number">-1</span> ? <span class="number">0</span> : (<span class="keyword">unsigned</span> <span class="keyword">int</span>)length;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>通过调试发现问题出现在fseek和ftell函数。以下是两者的定义：</p>
<blockquote>
<p><code>int fseek(FILE *stream, long offset, int fromwhere);</code><br>函数设置文件指针stream的位置。如果执行成功，stream将指向以fromwhere（偏移起始位置：文件头0(SEEK_SET)，当前位置1(SEEK_CUR)，文件尾2(SEEK_END)）为基准，偏移offset（指针偏移量）个字节的位置。如果执行失败(比如offset超过文件自身大小)，则不改变stream指向的位置。<br><code>long ftell(FILE *stream);</code><br>函数 ftell 用于得到文件位置指针当前位置相对于文件首的偏移字节数。</p>
</blockquote>
<p>其中fseek的offset还有ftell的返回值都是long型，根据long型的取值范围 $-2^{31}$~$2^{31}-1$ （-2147483648～2147483647），故对大于2.1G的文件进行操作时出错。<br>下面是一段引述自<a href="https://en.wikipedia.org/wiki/Large_file_support" target="_blank" rel="external">维基百科</a>的解释：</p>
<blockquote>
<p>Many old interfaces, especially C-based ones, explicitly specified argument types in a way that did not allow straightforward or transparent transition to 64-bit types. For example, the C functions fseek and ftell operate on file positions of type long int, which is typically 32 bits wide on 32-bit platforms, and cannot be made larger without sacrificing backward compatibility. (This was resolved by introducing new functions fseeko and ftello in POSIX. On Windows machines, under Visual C++, functions _fseeki64 and _ftelli64 are used.)</p>
</blockquote>
<p>大概意思是说对于大文件的支持，处理文件操作时，windows平台上需要用<code>fopen</code>，<code>_ftelli64</code>和<code>_fseeki64</code>，linux平台则用<code>fopen64</code>，<code>ftello64</code>和<code>fseeko64</code>。<br>于是在代码中增加如下定义：<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#if</span> <span class="selector-tag">defined</span>(WIN32) || <span class="selector-tag">defined</span>(WIN64)</div><div class="line"><span class="selector-id">#define</span> <span class="selector-tag">FOPEN_FUNC</span>(filename, mode) <span class="selector-tag">fopen</span>(filename, mode)</div><div class="line"><span class="selector-id">#define</span> <span class="selector-tag">FTELL_FUNC</span>(stream) <span class="selector-tag">_ftelli64</span>(stream)</div><div class="line"><span class="selector-id">#define</span> <span class="selector-tag">FSEEK_FUNC</span>(stream, offset, origin) <span class="selector-tag">_fseeki64</span>(stream, offset, origin)</div><div class="line"><span class="selector-id">#else</span></div><div class="line"><span class="selector-id">#define</span> <span class="selector-tag">FOPEN_FUNC</span>(filename, mode) <span class="selector-tag">fopen64</span>(filename, mode)</div><div class="line"><span class="selector-id">#define</span> <span class="selector-tag">FTELL_FUNC</span>(stream) <span class="selector-tag">ftello64</span>(stream)</div><div class="line"><span class="selector-id">#define</span> <span class="selector-tag">FSEEK_FUNC</span>(stream, offset, origin) <span class="selector-tag">fseeko64</span>(stream, offset, origin)</div><div class="line"><span class="selector-id">#endif</span></div></pre></td></tr></table></figure></p>
<p>同时将原来的<code>fopen</code>，<code>fseek</code>和<code>ftell</code>函数调用换为<code>FOPEN_FUNC</code>，<code>FSEEK_FUNC</code>，<code>FTELL_FUNC</code>。顺利通过第二关。</p>
<h2 id="Round-3"><a href="#Round-3" class="headerlink" title="Round 3"></a><strong>Round 3</strong></h2><h3 id="解压文件失败"><a href="#解压文件失败" class="headerlink" title="解压文件失败"></a>解压文件失败</h3><p>项目中解压用到了第三方的解压缩库zlib。网上有人说zlib就是不支持大文件的解压，-_-!，不会这么坑吧。如果真是这样，那还得换一个支持大文件解压缩的库（PS此刻想死的心都有）。<br>后来通过调试发现，问题不是出在zlib库的内部，而是出在了调用zlib的函数里面。主要原因如第二关中所说，于是将其中用到的<code>fopen</code>，<code>fseek</code>和<code>ftell</code>函数调用换为<code>FOPEN_FUNC</code>，<code>FSEEK_FUNC</code>，<code>FTELL_FUNC</code>。重新编译运行，问题解决了。所以说，网上的有些说法是不靠谱的。zlib库是支持大文件解压缩的。<br>至此，windows平台下大文件下载的问题算是解决了。</p>
<h2 id="Round-4"><a href="#Round-4" class="headerlink" title="Round 4"></a><strong>Round 4</strong></h2><h3 id="linux平台不work"><a href="#linux平台不work" class="headerlink" title="linux平台不work"></a>linux平台不work</h3><p>既然windows平台已经可以支持大文件的下载了，下面只要测试一下linux平台就OK了。然而事情并没有想象的那么简单，用改过的代码编译之后（庆幸没有遇到问题），跑了一个下载流程。意外发生了：程序跑到一半的时候出错，<code>File size limit exceeded</code>。做了一番google之后，发现原来对于linux平台下大文件的支持需要注意以下事项：</p>
<blockquote>
<ol>
<li><p>在所需要的头文件的#include之前添加如下几行代码：<br><code>#ifndef __USE_FILE_OFFSET64</code><br><code>#define __USE_FILE_OFFSET64</code><br><code>#endif</code><br><code>#ifndef __USE_LARGEFILE64</code><br><code>#define __USE_LARGEFILE64</code><br><code>#endif</code><br><code>#ifndef _LARGEFILE64_SOURCE</code><br><code>#define _LARGEFILE64_SOURCE</code><br><code>#endif</code></p>
</li>
<li><p>在编译程序的时候，加入如下选项：<br><code>-D_FILE_OFFSET_BITS=64 -D_LARGE_FILE</code></p>
</li>
<li><p>在程序的函数中，要注意如下几个方面：</p>
</li>
</ol>
<ul>
<li>首先32位机器用<code>fopen/fclose</code>打开大文件没有问题，顺序读写操作<code>while(!feof(fp)){ fread / fgets / fscanf }或while(1){ fwrite / fputs / fprintf}</code> 也没有问题。</li>
<li>由于32位机器下long是32位，故  <figure class="highlight plain"><figcaption><span>(FILE *stream, off_t offset, int whence)</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">off_t ftello(FILE *stream)</div></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<p>不能访问4G以上文件。此时要用<br>     <figure class="highlight plain"><figcaption><span>(FILE *stream, off_t offset, int whence)</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">off_t ftello(FILE *stream)</div></pre></td></tr></table></figure></p>
<p>依葫芦画瓢，按照以上步骤改过之后再编译测试就通过了。</p>
<p>OK, 经过以上的努力总算是通关了。整个过程一步一步摸索得来，为了让和我遇到类似问题的广大猿友们少走些弯路，故作此文。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;最近项目中遇到了下载大文件（大于2G）失败的问题。查看了代码之后发现从一开始实现的时候就没有考虑对大文件的支持&lt;i class=&quot;fa fa-frown-o&quot;&gt;&lt;/i&gt;。老板追的紧，没办法只能硬着头皮上。整个的解决过程就好像打怪升级一般，一步一个脚印。&lt;br&gt;
    
    </summary>
    
    
      <category term="2G, Big File Size, 大文件" scheme="http://yoursite.com/tags/2G-Big-File-Size-%E5%A4%A7%E6%96%87%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Akamai CCU V3 Fast Purge</title>
    <link href="http://yoursite.com/2016/08/20/Akamai%20CCU%20V3%20Fast%20Purge/"/>
    <id>http://yoursite.com/2016/08/20/Akamai CCU V3 Fast Purge/</id>
    <published>2016-08-19T16:00:00.000Z</published>
    <updated>2018-04-11T02:07:05.902Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Concept"><a href="#Concept" class="headerlink" title="Concept"></a>Concept</h2><p>Akamai是著名的CDN内容提供商。它提供了一套purge的API用于清空Edge Server上的缓存，使客户可以拿到最新的内容。目前在用的是CCU OPEN V2 API，主要是基于XML或JASON的一套REST API。通过调用它，会将相应的purge请求加入一个队列中，同时它也提供了query status的API用于查询purge请求的状态。一般情况下，从提交请求到请求执行完成需要4-7min。<br>这里想要介绍的是Akamai那边提供的V3版本的API，目前处于Beta阶段。最大的卖点就是Fast Purge - Featuring 5-second purge。<br><a id="more"></a></p>
<ul>
<li>Purge utility is Fast Purge, if enabled on the account (estimated time is approximately five seconds). If Fast Purge is not properly enabled on the account, the purge is processed using the legacy (v2) CCU version (estimated time is approximately 4–7 minutes).*</li>
<li>Purges are processed instantaneously - there is no longer a notion of a queue, neither “default” nor “emergency”.*</li>
<li>You can add objects to a total of 50K per request.*</li>
<li>You can choose to “invalidate” or “delete”.*</li>
<li>“production” and “staging” can be purged as separate commands.  This is detailed further down in this post.*</li>
<li>The V3 code will work even before the fast purge is turned on for your properties, so you can implement the code and turn on the functionality as soon as it’s ready.  These calls will be redirected to the V2 OPEN API on the back end.*</li>
</ul>
<h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><h3 id="Authorize-client"><a href="#Authorize-client" class="headerlink" title="Authorize client"></a>Authorize client</h3><p>OPEN API clients interact with the Akamai Intelligent Platform™ by signing each API request with credentials that are created specifically for each OPEN API client. The scope of the authorization is managed by you. These credentials are analogous to other types of system private data, such as ssh keys, and should be treated with the same care.<br>The authorization to call an API is managed in the Akamai Luna Control Center; however, not every Luna Control Center user will have permissions to create API authorizations. In order to manage API credentials, a user must have the Admin role in the context (account level or group level) the credentials will be tied to. Different organizations choose to grant this privilege to different classes of users. If you don’t see the Manage APIs menu item in the instructions below, then you may not have permission to manage API authorizations. If you find this to be the case, please consult your local administrator. They can either create the authorization you will need for this exercise, or they may grant you the permission to create API authorizations as appropriate to your organization.<br><strong>steps</strong></p>
<ol>
<li>Create an API client</li>
<li>Grant that client permission to call the API we are working with</li>
<li>Save our work to the Akamai Intelligent Platform</li>
<li>Download the authentication tokens so the local API client can use them to sign the API requests (client-api-kickstart.txt: contains Base URL, Access Tokens, Client token, and Secret)</li>
</ol>
<hr>
<h3 id="CCU-request"><a href="#CCU-request" class="headerlink" title="CCU request"></a>CCU request</h3><p>Purge methods (Invalidate or Delete by URL) currently available with this API by task type, as well as an estimated completion time, are as follows:</p>
<table>
<thead>
<tr>
<th style="text-align:left"><em>Action</em></th>
<th style="text-align:left"><em>Operation</em></th>
<th style="text-align:left"><em>API EndPoint</em></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Invalidate by URL</td>
<td style="text-align:left">POST</td>
<td style="text-align:left">/ccu/v3/invalidate/url/{network}</td>
</tr>
<tr>
<td style="text-align:left">Delete by URL</td>
<td style="text-align:left">POST</td>
<td style="text-align:left">/ccu/v3/delete/url/{network}</td>
</tr>
</tbody>
</table>
<p><strong>Invalidate by URL</strong><br>Request:<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">POST  <span class="meta-keyword">/ccu/</span>v3<span class="meta-keyword">/invalidate/</span>url/production</div><div class="line">Content-Type: application/<span class="class">json</span></div><div class="line">&#123;</div><div class="line">    <span class="string">"objects"</span>: [</div><div class="line">        <span class="string">"http://www.example.com/graphics/picture.gif"</span>,</div><div class="line">        <span class="string">"http://www.site-example.com/graphics/picture.gif"</span>,</div><div class="line">        <span class="string">"http://www.example1.com/documents/brochure.pdf"</span> </div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Response：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"httpStatus"</span>: <span class="number">201</span>,</div><div class="line">    <span class="attr">"detail"</span>: <span class="string">"Request accepted."</span>,</div><div class="line">    <span class="attr">"estimatedSeconds"</span>: <span class="number">5</span>,</div><div class="line">    <span class="attr">"purgeId"</span>: <span class="string">"043f-4af0-843f-aaf0043faaf0"</span>,</div><div class="line">    <span class="attr">"supportId"</span>: <span class="string">"17PY1321286429616716-211907680"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>Delete by URL</strong><br>Request:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">POST  /ccu/v3/<span class="keyword">delete</span>/<span class="keyword">url</span>/production</div><div class="line"><span class="keyword">Content</span>-<span class="keyword">Type</span>: application/<span class="keyword">json</span></div><div class="line">&#123;</div><div class="line">    <span class="string">"objects"</span>: [</div><div class="line">        <span class="string">"http://www.example.com/graphics/picture.gif"</span>,</div><div class="line">        <span class="string">"http://www.site-example.com/graphics/picture.gif"</span>,</div><div class="line">        <span class="string">"http://www.example1.com/documents/brochure.pdf"</span></div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Response:<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"httpStatus"</span>: <span class="number">201</span>,</div><div class="line">    <span class="attr">"detail"</span>: <span class="string">"Request accepted."</span>,</div><div class="line">    <span class="attr">"estimatedSeconds"</span>: <span class="number">5</span>,</div><div class="line">    <span class="attr">"purgeId"</span>: <span class="string">"043f-4af0-843f-aaf0043faaf0"</span>,</div><div class="line">    <span class="attr">"supportId"</span>: <span class="string">"17PY1321286429616716-211907680"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<h3 id="Signing-API-request"><a href="#Signing-API-request" class="headerlink" title="Signing API request"></a>Signing API request</h3><p>The signature is the base64-encoding of the SHA–256 HMAC of the data to sign with the signing key.<br>You can get an <a href="https://github.com/akamai-open" target="_blank" rel="external">EdgeGrid Request Signature Module</a>.</p>
<h4 id="Signing-Key"><a href="#Signing-Key" class="headerlink" title="Signing Key"></a>Signing Key</h4><p>The signing key is derived from the client secret. The signing key is computed as the base64 encoding of the SHA–256 HMAC of the timestamp string (the field value included in the HTTP authorization header described above) with the client secret as the key.<br><img src="/img/CCU_V3_WorkFlow.jpg" alt="Akamai CCU V3 WorkFlow"></p>
<h4 id="Example-Data-to-Sign"><a href="#Example-Data-to-Sign" class="headerlink" title="Example Data to Sign"></a>Example Data to Sign</h4><p>Raw CCU v3 request:<br><figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/diagnostic-tools/<span class="built_in">v1</span>/locations</div></pre></td></tr></table></figure></p>
<p>the data to sign looks like this (\t represents a tab, line breaks added for readability):<br><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">GET<span class="symbol">\t</span>https<span class="symbol">\t</span>akaa-xxxxxxxxxxxxxxxx-xxxxxxxxxxxxxxxx.luna.akamaiapis.net<span class="symbol">\t</span></div><div class="line">/diagnostic-tools/v1/locations<span class="symbol">\t</span><span class="symbol">\t</span><span class="symbol">\t</span>EG1-HMAC-SHA256</div><div class="line">client_token=akab-xxxxxxxxxxxxxxxx-xxxxxxxxxxxxxxxx;</div><div class="line">access_token=akab-xxxxxxxxxxxxxxxx-xxxxxxxxxxxxxxxx;</div><div class="line">timestamp=20140402T18:05:06+0000;</div><div class="line">nonce=185f94eb-537c-4c01-b8cc-2fa5a06aee7f;</div></pre></td></tr></table></figure></p>
<h3 id="More-information"><a href="#More-information" class="headerlink" title="More information"></a>More information</h3><p><a href="https://developer.akamai.com/api/purge/ccu/overview.html" target="_blank" rel="external">https://developer.akamai.com/api/purge/ccu/overview.html</a><br><a href="https://developer.akamai.com/introduction/Client_Auth.html" target="_blank" rel="external">https://developer.akamai.com/introduction/Client_Auth.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Concept&quot;&gt;&lt;a href=&quot;#Concept&quot; class=&quot;headerlink&quot; title=&quot;Concept&quot;&gt;&lt;/a&gt;Concept&lt;/h2&gt;&lt;p&gt;Akamai是著名的CDN内容提供商。它提供了一套purge的API用于清空Edge Server上的缓存，使客户可以拿到最新的内容。目前在用的是CCU OPEN V2 API，主要是基于XML或JASON的一套REST API。通过调用它，会将相应的purge请求加入一个队列中，同时它也提供了query status的API用于查询purge请求的状态。一般情况下，从提交请求到请求执行完成需要4-7min。&lt;br&gt;这里想要介绍的是Akamai那边提供的V3版本的API，目前处于Beta阶段。最大的卖点就是Fast Purge - Featuring 5-second purge。&lt;br&gt;
    
    </summary>
    
    
      <category term="Akamai,Fast Purge" scheme="http://yoursite.com/tags/Akamai-Fast-Purge/"/>
    
  </entry>
  
  <entry>
    <title>EdgeCast FTP Upload文件size变小问题的解决</title>
    <link href="http://yoursite.com/2016/08/17/EdgeCast%20FTP%20Upload%E6%96%87%E4%BB%B6size%E5%8F%98%E5%B0%8F%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3/"/>
    <id>http://yoursite.com/2016/08/17/EdgeCast FTP Upload文件size变小问题的解决/</id>
    <published>2016-08-16T16:00:00.000Z</published>
    <updated>2018-04-11T02:06:47.813Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做EdgeCast CDN的评估，包括file的upload以及purge功能。因为之前有已经实现的ftp的组件，并且在实际生产中用于Akamai CDN的文件上传，未出现什么问题。然而，应用这个组件上传文件到edgecast的ftp上时发现文件竟然变小了！<br><a id="more"></a><br>起初我怀疑是edgecast ftp的问题，于是我就试着用现有的ftp软件8uftp去上传，发现不存在文件变小的问题。那么可能是我们代码的问题，可是奇怪的是为什么对于akamai的ftp就没有问题呢。此时我想到了用wireshark来捕捉ftp网络数据。<br><img src="/img/capture1.png" alt="有问题的抓包"><br>图中上面部分的是akamai的ftp传输过程，下面部分是edgecast的ftp传输过程。仔细比较可发现，akamai ftp对于STOR命令的response是“150 Opening BINARY mode data connection for xxx.7z”，而edgecast ftp对于STOR命令的response是”150 Accepted data connection”。所以akamai ftp默认的传输模式就是binary，而edgecast ftp的默认传输模式是ascii。于是在代码里STOR之前指定传输模式为binary，问题就解决了。附上修改之后的网络数据包。<br><img src="/img/capture2.png" alt="修改过后没问题的抓包"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在做EdgeCast CDN的评估，包括file的upload以及purge功能。因为之前有已经实现的ftp的组件，并且在实际生产中用于Akamai CDN的文件上传，未出现什么问题。然而，应用这个组件上传文件到edgecast的ftp上时发现文件竟然变小了！&lt;br&gt;
    
    </summary>
    
    
      <category term="EdgeCast, FTP" scheme="http://yoursite.com/tags/EdgeCast-FTP/"/>
    
  </entry>
  
</feed>
